{"version":3,"sources":["algorithms/dijkstra.js","algorithms sync /^/.*$","components/NavBar.js","utilities/arrangeNodes.js","components/Dropzone.js","examples/index.js","components/ExamplesManager.js","components/RandomManager.js","utilities/randomGenerator.js","components/GraphBuilder.js","components/InfoBox.js","components/SPP.js","App.js","serviceWorker.js","index.js"],"names":["preprocess","state","file","nodes","edges","currentNode","el","distance","id","includes","type","pred","info","process","edge","endNode","nextSteps","indexes","title","target","push","node","newDistance","cost","source","postprocess","prevType","previousNode","leavingStar","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","NavBar","AppBar","position","className","Toolbar","Typography","variant","color","Component","balancedArrange","f","d3","require","forceSimulation","force","forceManyBody","strength","length","distanceMin","distanceMax","tick","n","x","y","handleText","forceArrange","sim","forceLink","JSON","parse","stringify","randomArrange","Math","random","mode","Dropzone","props","onDrop","accepted","rejected","scope","reader","FileReader","onload","progressEvent","this","result","validate","adapt","getFile","SyntaxError","showMessage","readAsText","message","validationMode","modes","SPP","Array","isArray","nodesIds","entries","i","every","join","Paper","hide","accept","getRootProps","getInputProps","useStyles","makeStyles","theme","createStyles","doc","display","margin","ExamplesManager","classes","useState","clicked","setClicked","files","k","key","loading","Description","onClick","fontSize","CircularProgress","input","width","RandomManager","setN","m","setM","mMax","TextField","label","inputProps","min","max","step","value","onChange","v","disabled","Button","c","leavingStars","j","floor","generate","GraphBuilder","selected","renderedEdges","moveNode","prevProps","layoutEngineType","setState","renderedNodes","aName","aValue","concat","attr","getAttribute","document","createAttribute","setAttribute","colors","labelSize","onRenderComplete","GraphConfig","NodeTypes","shapeId","shape","viewBox","cx","cy","r","stroke","current","strokeWidth","empty","end","pathNode","path","startNode","start","visitedNode","visited","NodeSubtypes","EdgeTypes","currentEdge","emptyEdge","pathEdge","visitedEdge","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","readOnly","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","canCreateEdge","onBackgroundClick","edgeArrowSize","renderDefs","ARROW_SIZE","refX","markerWidth","markerHeight","orient","d","style","fill","renderNodeText","data","isSelected","textAnchor","dy","fontWeight","afterRenderEdge","element","edgeContainer","isEdgeSelected","parentNode","insertBefore","firstChild","edgeColor","comp","querySelector","comp_list","querySelectorAll","sourceNode","x1","y1","targetNode","x2","y2","tan","deg","atan","PI","innerHTML","flow","costTag","cloneNode","capacity","parentElement","appendChild","transform","capacityTag","listStyleType","padding","infoEntry","InfoBox","phase","substep","sort","a","b","states","onReset","clear","colorPicker","disableNext","endIndex","engine","finished","selectedPath","stateIndex","targetAll","splice","onDownload","fileNodes","fileEdges","link","createElement","href","window","URL","createObjectURL","Blob","Date","now","body","click","setTimeout","s","nextStep","launchAlgorithm","prevStep","getPaths","paths","tmp_pred","unshift","togglePath","prevPath","parseInt","this_node","setColor","hex","showPicker","prev","next","isPathEdge","slice","computeObjective","objective","stringPath","name","algorithm","newState","idx","shortestPaths","GetApp","backgroundColor","onChangeComplete","ButtonGroup","KeyboardArrowLeft","KeyboardArrowRight","size","select","SelectProps","MenuProps","MenuItem","filter","FormControlLabel","control","Switch","checked","App","open","onToggleDrawer","sidebar","toggleDrawer","basename","exact","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14c0496a.chunk.js","sourcesContent":["export function preprocess(state){\r\n    let { file: { nodes, edges }, currentNode } = state;\r\n    for(let el of nodes){\r\n        el.distance = el.id === currentNode ? 0 : -1;\r\n        if(!['startNode', 'endNode', 'currentNode'].includes(el.type)) el.type = 'empty';\r\n        delete el.pred;\r\n    }\r\n\r\n    for(let el of edges){\r\n        el.type = 'emptyEdge';\r\n    }\r\n\r\n    state.info = [`Setting starting node distance to 0`, `Setting other nodes' distance to ∞`]\r\n}\r\n\r\nexport function process(state, edge, endNode, nextSteps, indexes){\r\n    var {file: {nodes}, currentNode } = state;\r\n    edge.type = 'visitedEdge';\r\n\r\n    state.info = [`Scanning leaving star for node ${nodes[indexes[currentNode]].title}`, `Found node ${nodes[indexes[edge.target]].title}`]\r\n    \r\n    if(edge.target !== endNode && nodes[indexes[edge.target]].type !== 'visitedNode'){\r\n        nextSteps.push(edge.target);\r\n    }\r\n\r\n    let node = nodes[indexes[edge.target]];\r\n\r\n    if(node.type === 'empty') {\r\n        node.type = 'visitedNode';\r\n        state.info.push(`Marking node ${nodes[indexes[edge.target]].title} as a visited node`);\r\n    }\r\n\r\n    var { distance } = nodes[indexes[currentNode]]\r\n    let newDistance = (edge.cost ? edge.cost : 1) + distance\r\n    \r\n    /******* If distance < 0, node was never explored *******/\r\n    if(node.distance < 0 || node.distance > newDistance){\r\n        node.distance < 0 ? \r\n            state.info.push(`Updating node ${nodes[indexes[edge.target]].title}'s distance from the source since it was found for the first time`) :\r\n            state.info.push(`Updating node ${nodes[indexes[edge.target]].title}'s distance from the source since a shorter path was found`);\r\n        \r\n        state.info.push(`Setting node ${nodes[indexes[edge.source]].title} as predecessor of node ${nodes[indexes[edge.target]].title}`);\r\n\r\n        node.distance = newDistance;\r\n        node.pred = edge.source;\r\n    }\r\n}\r\n\r\nexport function postprocess(state, indexes, currentNode){\r\n    let { file: { edges, nodes } } = state;\r\n    \r\n    if(currentNode.prevType === 'visitedNode') currentNode.prevType = 'pathNode';\r\n\r\n    let previousNode = nodes[indexes[currentNode.pred]];\r\n\r\n    for(let idx of previousNode.leavingStar) {\r\n        let edge = edges[idx];\r\n        if(currentNode.id === edge.target){\r\n            edge.type = 'pathEdge';\r\n            state.info = [`Found node ${nodes[indexes[edge.source]].title} while following the path backwards`, `Marking edge ${nodes[indexes[edge.source]].title}-${nodes[indexes[edge.target]].title} as path edge`]\r\n            break;\r\n        }\r\n    }\r\n\r\n    state.info.push(`Marking node ${nodes[indexes[currentNode.id]].title} as path node`);\r\n\r\n    currentNode.type = currentNode.prevType;\r\n    delete currentNode.prevType;\r\n}","var map = {\n\t\"./dijkstra\": 134,\n\t\"./dijkstra.js\": 134\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 334;","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Typography, /*IconButton*/ } from '@material-ui/core/';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport '../css/NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    \r\n    return(\r\n      <AppBar position=\"absolute\" className=\"NavBar-appBar\">\r\n        <Toolbar className=\"NavBar-toolbar\">\r\n            {/* <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"Open drawer\"\r\n              onClick={this.props.onClick}\r\n            >\r\n              <MenuIcon/>\r\n            </IconButton> */}\r\n            <span className=\"NavBar-spacer\"/>\r\n            <Typography variant=\"h6\" color=\"inherit\" className=\"NavBar-typography\">\r\n                NETWORK FLOWS OPTIMIZATION\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default NavBar;","let balancedArrange = (f) => {\r\n    const d3 = require('d3');\r\n    let { nodes, edges } = f;\r\n\r\n    let sim = d3.forceSimulation(nodes)\r\n        .force(\"charge\", d3.forceManyBody().strength(-100 * (nodes.length ** 2 / edges.length)).distanceMin(50).distanceMax(100))\r\n\r\n    \r\n    sim.tick([10])\r\n\r\n    f.nodes = nodes.map( n => ({\r\n        id: n.id,\r\n        title: n.title,\r\n        x: n.x,\r\n        y: n.y,\r\n        type: 'empty'\r\n    }));\r\n\r\n    for(let el of edges){\r\n        el.type = 'emptyEdge';\r\n        el.handleText = '.';\r\n    }\r\n\r\n    return f;\r\n}\r\n\r\nlet forceArrange = (f) => {\r\n    const d3 = require('d3');\r\n    let { nodes, edges } = f;\r\n\r\n    let sim = d3.forceSimulation(nodes)\r\n        .force(\"link\", \r\n            d3.forceLink(JSON.parse(JSON.stringify(edges)))\r\n            .id(n => n.id).distance(e => e.cost ? e.cost*100 : 100))\r\n\r\n    sim.tick([10])\r\n\r\n    sim.force(\"charge\", d3.forceManyBody().strength(-1000).distanceMin(100))\r\n\r\n    \r\n    sim.tick([10])\r\n\r\n    f.nodes = nodes.map( n => ({\r\n        id: n.id,\r\n        title: n.title,\r\n        x: n.x,\r\n        y: n.y,\r\n        type: 'empty'\r\n    }));\r\n\r\n    for(let el of edges){\r\n        el.type = 'emptyEdge';\r\n        el.handleText = '.';\r\n    }\r\n\r\n    return f;\r\n}\r\n\r\nlet randomArrange = (f) => {\r\n    for(let el of f.nodes){\r\n        el.x = Math.random() * 600;\r\n        el.y = Math.random() * 600;\r\n        el.type = 'empty';\r\n    }\r\n\r\n    for(let el of f.edges){\r\n        el.type = 'emptyEdge';\r\n        el.handleText = '.';\r\n    }\r\n\r\n    return f;\r\n}\r\n\r\nexport default (f, mode = 'balanced') => {\r\n    switch(mode){\r\n        case 'balanced':\r\n            return balancedArrange(f);\r\n        case 'force':\r\n            return forceArrange(f);\r\n        case 'random':\r\n            return randomArrange(f);\r\n        default:\r\n            return f;\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Drop from 'react-dropzone';\r\nimport {Paper} from '@material-ui/core';\r\n\r\nimport adapt from '../utilities/arrangeNodes';\r\n\r\nimport '../css/Dropzone.css'\r\n\r\nclass Dropzone extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            message: ''\r\n        }\r\n\r\n        this.getFile = this.props.getFile;\r\n        this.showMessage = this.props.showMessage;\r\n        this.mode = this.props.validationMode;\r\n\r\n        this.modes = {\r\n            SPP: {\r\n                nodes: ['id'],\r\n                edges: ['source', 'target']\r\n            }\r\n        }\r\n    }\r\n\r\n    validate(f){\r\n        if(!(f.nodes && f.edges)){\r\n            this.showMessage('Missing at least one of the following keywords: nodes | edges');\r\n            return false;\r\n        }\r\n\r\n        if(!(Array.isArray(f.nodes) && Array.isArray(f.edges))){\r\n            this.showMessage('Type error: nodes & edges must be array of objects');\r\n            return false;\r\n        }\r\n\r\n        let {nodes, edges} = this.modes[this.mode];\r\n\r\n        let nodesIds = [];\r\n        for(const [i, el] of f.nodes.entries()){\r\n            if(!nodes.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Node at index [${i}] misses at least one of the following keywords: ${nodes.join(' | ')}`);\r\n                return false;\r\n            }\r\n            nodesIds.push(el.id);\r\n        }\r\n\r\n        for(const [i, el] of f.edges.entries()){\r\n            if(!edges.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Edge at index [${i}] misses at least one of the following keywords: ${edges.join(' | ')}`);\r\n                return false;\r\n            }\r\n\r\n            if(!(nodesIds.includes(el.source) && nodesIds.includes(el.target))){\r\n                this.showMessage(`Edge at index [${i}]: source or target node does not exist`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    onDrop = (accepted, rejected) => {\r\n        const scope = this;\r\n\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = function(progressEvent){\r\n            try{\r\n                let f = JSON.parse(this.result);\r\n                if(!scope.validate(f)) return;\r\n\r\n                f = adapt(f);\r\n                scope.getFile(f);\r\n            }\r\n            catch(e){\r\n                if (e instanceof SyntaxError) {\r\n                    scope.showMessage('Not a JSON file');\r\n                    return;\r\n                }\r\n                else throw(e);\r\n            }\r\n        };\r\n\r\n        for (var f of accepted) {\r\n            reader.readAsText(f);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Dropzone-root\">\r\n                <Paper className={this.props.hide ? \"Dropzone-paperHide\" : \"Dropzone-paper\"}>\r\n                    <Drop accept=\".json\" onDrop={this.onDrop}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()} className=\"Dropzone-dropDiv\">\r\n                                <Paper className=\"Dropzone-dropPaper\">\r\n                                    <input {...getInputProps()}/>\r\n                                    <div>\r\n                                        <p>Try dropping the file here, or click to select a file to upload.</p>\r\n                                    </div>\r\n                                </Paper>\r\n                            </div>\r\n                        )}\r\n                    </Drop>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropzone;","import n4 from './spp/N=4,M=3.json'\r\nimport n6 from './spp/N=6,M=9.json'\r\nimport n10 from './spp/N=10,M=25.json'\r\nimport n50 from './spp/N=50,M=171.json'\r\n\r\nexport default {\r\n    'N=4,M=3': n4, \r\n    'N=6,M=9': n6, \r\n    'N=10,M=25': n10, \r\n    'N=50,M=171': n50\r\n};","import React, { useState } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { Description } from '@material-ui/icons';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport files from '../examples';\r\nimport adapt from '../utilities/arrangeNodes';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    doc: {\r\n        display: 'inline-block', \r\n        margin: 20\r\n    },\r\n}));\r\n\r\n\r\nlet ExamplesManager = (props) => {\r\n    const classes = useStyles();\r\n\r\n    var [ clicked, setClicked ] = useState();\r\n    \r\n    return (\r\n        <>\r\n            Alternatively, try one of the following examples:\r\n            \r\n            <br/>\r\n            \r\n            {Object.keys(files).map(k => (\r\n                <div key={k} className={classes.doc}>\r\n                    {!props.loading && <Description onClick={() => {setClicked(k); props.getFile( adapt( files[k] ) )}} fontSize='large'/>}\r\n                    {props.loading && k===clicked && <CircularProgress color='inherit' fontSize='large'/>}\r\n                    <br/>\r\n                    {k}\r\n                </div>\r\n            ))}\r\n        </>\r\n)}\r\n\r\nexport default ExamplesManager;","import React, { useState } from 'react';\r\nimport { Button, CircularProgress, TextField } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport generate from '../utilities/randomGenerator';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    input: {\r\n        margin: 10,\r\n        width: 100\r\n    },\r\n}));\r\n\r\n\r\nlet RandomManager = (props) => {\r\n    const classes = useStyles();\r\n\r\n    let [ n, setN ] = useState(2);\r\n    let [ m, setM ] = useState(1);\r\n\r\n    let nMax = 50;\r\n    let mMax = n*(n-1)/2;\r\n    \r\n    return (\r\n    <>\r\n        Otherwise, you can generate a random graph:\r\n        <br/>\r\n        \r\n        <TextField className={classes.input} label='Nodes' type=\"number\" inputProps={{ min: 1, max: nMax, step: 1 }} value={n} onChange={(e) => {let v = e.target.value; setN(v > nMax ? nMax : v); if(m > v*(v-1)/2) setM(v*(v-1)/2)}}/>\r\n        <TextField className={classes.input} label='Edges' type=\"number\" inputProps={{ min: 0, max: mMax, step: 1 }} value={m} onChange={(e) => setM(e.target.value > mMax ? mMax : e.target.value)} disabled={!n}/>\r\n        <br/>\r\n        <Button disabled={!n || !m} variant='outlined' onClick={() => props.getFile(generate(n, m))}>{props.loading ? (<CircularProgress/>) : 'GENERATE'}</Button>\r\n        \r\n    </>\r\n)}\r\n\r\nexport default RandomManager;","export default (n, m, c=10) => {\r\n    let nodes = [];\r\n    for(let i=1; i<=n; i++){\r\n        nodes.push({\r\n            id: i,\r\n            title: `${i}`,\r\n            x: Math.random() * 600,\r\n            y: Math.random() * 600,\r\n            type: 'empty'\r\n        });\r\n    }\r\n\r\n    let edges = [];\r\n    let leavingStars = {};\r\n    for(let j=0; j<m; j++){\r\n        let source = 1 + Math.floor(Math.random() * (n - 1));\r\n\r\n        if(!leavingStars[source]) leavingStars[source] = [];\r\n        \r\n        while (leavingStars[source].length === n - source){\r\n            source = 1 + Math.floor(Math.random() * (n - 1));\r\n            if(!leavingStars[source]) leavingStars[source] = [];\r\n        }\r\n\r\n        let target = source + Math.floor(Math.random() * (n - source)) + 1;\r\n\r\n        while(leavingStars[source].includes(target)) target = source + Math.floor(Math.random() * (n - source)) + 1;\r\n        leavingStars[source].push(target);\r\n\r\n        let cost = Math.floor(Math.random() * c);\r\n        \r\n        edges.push({\r\n            source,\r\n            target,\r\n            cost,\r\n            type: 'emptyEdge',\r\n            handleText: cost ? cost : '.'\r\n        });\r\n    }\r\n\r\n    return { nodes, edges };\r\n}","import React, { Component } from 'react';\r\nimport { GraphView } from 'react-digraph';\r\n\r\nimport '../css/GraphBuilder.css';\r\n\r\n\r\nconst ARROW_SIZE = 5;\r\n\r\nclass GraphBuilder extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: null,\r\n            renderedEdges: 0\r\n        }\r\n\r\n        this.moveNode = this.props.moveNode;\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.layoutEngineType !== this.props.layoutEngineType){\r\n            this.setState({renderedNodes: 0, renderedEdges: 0});\r\n        }\r\n    }\r\n\r\n    setAttribute(c, aName, aValue, concat=true){\r\n        var attr = concat ? c.getAttribute(aName) : document.createAttribute(aName);\r\n        c.setAttribute(aName,  attr && concat ? attr + aValue : aValue);\r\n    }\r\n  \r\n    render() {\r\n        const { colors, edges, labelSize, layoutEngineType, nodes, onRenderComplete } = this.props;\r\n        const { renderedEdges, selected } = this.state;\r\n        \r\n        const GraphConfig =  {\r\n            NodeTypes: {\r\n                currentNode: {\r\n                    shapeId: \"#currentNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"currentNode\" key=\"3\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.current} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                empty: {\r\n                    shapeId: \"#empty\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"empty\" key=\"0\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.empty}  />\r\n                        </symbol>\r\n                    )\r\n                },\r\n                endNode: {\r\n                    shapeId: \"#endNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"endNode\" key=\"2\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.end} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                pathNode: {\r\n                    shapeId: \"#pathNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"pathNode\" key=\"4\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.path} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                startNode: {\r\n                    shapeId: \"#startNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"startNode\" key=\"1\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.start} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                visitedNode: {\r\n                    shapeId: \"#visitedNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"visitedNode\" key=\"5\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.visited} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                }\r\n            },\r\n            NodeSubtypes: {},\r\n            EdgeTypes: {\r\n                currentEdge: {\r\n                    shapeId: \"#currentEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"currentEdge\" key=\"3\"/>\r\n                    ),\r\n                    color: colors.current\r\n                },\r\n                emptyEdge: {  // required to show empty edges\r\n                    shapeId: \"#emptyEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\"  key=\"0\"/>\r\n                    ),\r\n                    color: colors['not visited']\r\n                },\r\n                pathEdge: {\r\n                    shapeId: \"#pathEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"pathEdge\" key=\"1\" />\r\n                    ),\r\n                    color: colors.path\r\n                },\r\n                visitedEdge: {\r\n                    shapeId: \"#visitedEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"visitedEdge\" key=\"2\" />\r\n                    ),\r\n                    color: colors.visited\r\n                }\r\n            }\r\n        }\r\n\r\n        const NodeTypes = GraphConfig.NodeTypes;\r\n        const NodeSubtypes = GraphConfig.NodeSubtypes;\r\n        const EdgeTypes = GraphConfig.EdgeTypes;\r\n\r\n        return(\r\n            <div className=\"GraphBuilder-root\">\r\n                <GraphView  ref='GraphView'\r\n                    nodeKey=\"id\"\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    selected={selected}\r\n                    nodeTypes={NodeTypes}\r\n                    nodeSubtypes={NodeSubtypes}\r\n                    edgeTypes={EdgeTypes}\r\n                    readOnly\r\n                    onSelectNode={(e) => e === selected ? this.setState({selected: null}) : this.setState({selected: e})}\r\n                    onCreateNode={() => {}}\r\n                    onUpdateNode={() => {}}\r\n                    onDeleteNode={() => {}}\r\n                    onSelectEdge={() => {}}\r\n                    onCreateEdge={() => {}}\r\n                    onSwapEdge={() => {}}\r\n                    onDeleteEdge={() => {}}\r\n                    canCreateEdge={() => {}}\r\n\r\n                    onBackgroundClick={(x, y) => this.moveNode(selected, {x,y})}\r\n\r\n                    layoutEngineType={layoutEngineType ? null : false}\r\n\r\n                    edgeArrowSize={ARROW_SIZE}\r\n\r\n                    renderDefs={() => {\r\n                        return Object.entries(EdgeTypes).map((o) => {\r\n                            let k=o[0], v=o[1];\r\n\r\n                            return <marker\r\n                                id={`end-arrow-${k}`}\r\n                                key={`end-arrow-${k}`}\r\n                                viewBox={`0 -${ARROW_SIZE / 2} ${ARROW_SIZE} ${ARROW_SIZE}`}\r\n                                refX={`${ARROW_SIZE / 2}`}\r\n                                markerWidth={`${ARROW_SIZE}`}\r\n                                markerHeight={`${ARROW_SIZE}`}\r\n                                orient=\"auto\"\r\n                            >\r\n                                <path\r\n                                    className=\"arrow\"\r\n                                    d={`M0,-${ARROW_SIZE / 2}L${ARROW_SIZE},0L0,${ARROW_SIZE / 2}`}\r\n                                    style={{fill: v.color}}\r\n                                />\r\n                            </marker>\r\n                        })\r\n                    }}\r\n\r\n                    renderNodeText={(data, id, isSelected) => {\r\n                        return <text className=\"node-text\" textAnchor=\"middle\" color=\"white\">\r\n                            <tspan x=\"0\" dy=\"3\" fontSize=\"7px\">{data.title}</tspan>\r\n                            <tspan fill=\"blue\" stroke=\"white\" strokeWidth=\"0.3\" fontWeight=\"bold\" x=\"0\" dy=\"25\" fontSize=\"10px\">{'distance' in data ? data.distance < 0 ? '∞' : data.distance : ''}</tspan>\r\n                            <title>{data.title}</title>\r\n                        </text>\r\n                    }}\r\n\r\n                    afterRenderEdge={(id, element, edge, edgeContainer, isEdgeSelected) => {\r\n                        edgeContainer.parentNode.insertBefore( edgeContainer, edgeContainer.parentNode.firstChild);\r\n                        \r\n                        var edgeColor = EdgeTypes[edge.type ? edge.type : 'emptyEdge'].color;\r\n                        /***** Setting edge color *****/ \r\n                        \r\n                        let comp = edgeContainer.querySelector('.edge');\r\n                        if(!comp) return;\r\n\r\n                        this.setAttribute(comp, 'style', `stroke: ${edgeColor};  marker-end: url(#end-arrow-${edge.type})`, false);\r\n                        /***** Setting arrow end color *****/ \r\n\r\n                        comp = document.querySelector('.arrow');\r\n                        this.setAttribute(comp, 'style',  `fill: ${edgeColor};`, false);\r\n\r\n                        //Because at first there is only one element, but then it would create 2 new elements per render\r\n                        let comp_list = edgeContainer.querySelectorAll('.edge-text');\r\n\r\n                        //When edge is moving \".edge-text\" elements do not exist\r\n                        if(!comp_list.length) return;\r\n\r\n                        comp = comp_list[0]; \r\n\r\n                        /***** Rotating labels according to edge slope *****/ \r\n\r\n                        let {x: x1, y: y1} = element.props.sourceNode;\r\n                        let {x: x2, y: y2} = element.props.targetNode;\r\n\r\n                        let x = (x1+x2)/2, y = (y1+y2)/2;\r\n\r\n                        let tan = (y2 - y1)/(x2 - x1);\r\n                        let deg = Math.atan(tan)*180/Math.PI;;\r\n\r\n                        this.setAttribute(comp, 'style', `fill: ${edgeColor}; stroke: white; stroke-width: 0.5px; font-weight: bold; font-size: ${labelSize}`, false);\r\n                        this.setAttribute(comp, 'transform', `translate(${x}, ${y}) rotate(${deg}) translate(0, -${labelSize})`, false);\r\n                        comp.innerHTML = edge.flow ? edge.flow : '';\r\n\r\n                        /***** Labels for costs and maximum capacity *****/ \r\n                        \r\n                        if(edge.cost && comp_list.length === 1){\r\n                            let costTag = comp.cloneNode(true);\r\n                            \r\n                            this.setAttribute(costTag, 'transform', ` translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`);\r\n                            costTag.id = \"cost-tag\";\r\n                            costTag.style.fill = 'red';\r\n                            costTag.innerHTML = edge.cost;\r\n                            \r\n                            comp.parentElement.appendChild(costTag);\r\n                        }\r\n                        else if(comp_list[1] && comp_list[1].id === 'cost-tag'){\r\n                                let transform = comp_list[0].getAttribute('transform');\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`, false);\r\n                        }\r\n                        \r\n                        if(edge.capacity && comp_list.length === 1){\r\n                            let capacityTag = comp.cloneNode(true);\r\n\r\n                            this.setAttribute(capacityTag, 'transform', ` translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`);\r\n                            capacityTag.id = \"capacity-tag\";\r\n                            capacityTag.style.fill = 'blue';\r\n                            capacityTag.innerHTML = edge.capacity;\r\n                            \r\n                            comp.parentElement.appendChild(capacityTag);\r\n                        }\r\n                        else {\r\n                            let transform = comp_list[0].getAttribute('transform');\r\n                            if(comp_list[1] && comp_list[1].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                            else if(comp_list[2] && comp_list[2].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[2], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                        }\r\n\r\n                        this.setState({ renderedEdges: this.state.renderedEdges+1});\r\n                        if(renderedEdges + 1 === edges.length) onRenderComplete();\r\n                    }}\r\n                />\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default GraphBuilder;","import React from 'react';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    info: {\r\n        listStyleType: \"'»'\",\r\n        padding: 0,\r\n        width: '80%'\r\n    },\r\n    infoEntry: {\r\n        padding: 5,\r\n    },\r\n}));\r\n\r\nlet InfoBox = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <table>\r\n                <tbody>\r\n                    <tr><td>Phase:</td><td>{props.phase}</td></tr>\r\n                    <tr><td>Step:</td><td>{props.step}</td></tr>\r\n                    <tr><td>Substep:</td><td>{props.substep}</td></tr>\r\n                </tbody>\r\n            </table>\r\n            <ul className={classes.info}>\r\n                {props.info ? props.info.map(n => (<li className={classes.infoEntry} key={n}>{n}<br/></li>)) : ''}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React, { Component } from 'react';\r\nimport Dropzone from './Dropzone';\r\nimport ExamplesManager from './ExamplesManager';\r\nimport RandomManager from './RandomManager';\r\nimport GraphBuilder from './GraphBuilder';\r\nimport { Button, ButtonGroup, CircularProgress, FormControlLabel, MenuItem, Paper, Switch, TextField } from '@material-ui/core';\r\nimport { KeyboardArrowLeft, KeyboardArrowRight, GetApp } from '@material-ui/icons';\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nimport '../css/SPP.css'\r\nimport InfoBox from './InfoBox';\r\n\r\n// var d3 = require('d3-force');\r\n\r\nconst PATH_SEPARATOR = ' → '\r\n\r\nclass SPP extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            colorPicker: '',\r\n            colors: {\r\n                current: 'red',\r\n                'not visited': 'black',\r\n                end: 'green',\r\n                path: 'blue',\r\n                start: 'orange',\r\n                visited: '#c9c900'\r\n            },\r\n            disableNext: true,\r\n            endIndex: false,\r\n            endNode: '',\r\n            finished: false,\r\n            indexes: {},\r\n            loading: false,\r\n            message: '',\r\n            nextSteps: [],\r\n            selectedPath: '',\r\n            startNode: '',\r\n            stateIndex: 0,\r\n            states: [],\r\n            targetAll: true\r\n        }\r\n    }\r\n\r\n    getFile = (file) => {\r\n        this.setState({loading: true});\r\n\r\n        var indexes = {};\r\n\r\n        file.nodes.sort((a,b) => a.id - b.id)\r\n\r\n        for(let [i, el] of file.nodes.entries()){\r\n            indexes[el.id] = i;\r\n        }\r\n\r\n        for(let [i, el] of file.edges.entries()){\r\n            let node =  file.nodes[indexes[el.source]];\r\n            \r\n            if(!node.leavingStar) node.leavingStar = [];\r\n\r\n            node.leavingStar.push(i);\r\n        }\r\n\r\n        var { states } = this.state;\r\n        states.push({phase: 0, step: 0, substep: 0, currentNode: null, file});\r\n\r\n        this.setState({ states, indexes, loading: false });\r\n    }\r\n\r\n    onReset = (clear=false) => this.setState({\r\n        colorPicker: '',\r\n        colors: {\r\n            current: 'red',\r\n            'not visited': 'black',\r\n            end: 'green',\r\n            path: 'blue',\r\n            start: 'orange',\r\n            visited: '#c9c900'\r\n        },\r\n        disableNext: true,\r\n        endIndex: false,\r\n        endNode: '',\r\n        engine: !this.state.engine,\r\n        finished: false,\r\n        indexes: clear ? {} : this.state.indexes,\r\n        message: '',\r\n        nextSteps: [],\r\n        selectedPath: '',\r\n        startNode: '',\r\n        stateIndex: 0,\r\n        states: clear ? [] : function(state){\r\n            let { indexes, startNode, states } = state;\r\n            states.length = 1;\r\n            if(startNode) states[0].file.nodes[indexes[startNode]].type = 'empty'\r\n            states[0].info = []\r\n            return states\r\n        }(this.state),\r\n        targetAll: true\r\n    });\r\n\r\n    onChange = (key) => (e) => {\r\n        var { endNode, engine, indexes, startNode, stateIndex, states, targetAll } = this.state;\r\n\r\n        let { nodes } = states[stateIndex].file;\r\n\r\n        const { value } = e.target;\r\n\r\n        states.splice(1, states.length - 1);\r\n        stateIndex = 0;\r\n\r\n        for(let n of states[stateIndex].file.nodes){\r\n            if(n.id === value){\r\n                n.type = key\r\n            }\r\n            else if(n.type === key) n.type = 'empty';\r\n        }\r\n\r\n        for(let n of states[stateIndex].file.edges) n.type = 'emptyEdge';\r\n        states[stateIndex].currentNode = null\r\n\r\n        if(!states[stateIndex].info) states[stateIndex].info = ['', '']\r\n\r\n        if(value && key === 'startNode')  states[stateIndex].info[0] = `Setting node ${nodes[indexes[value]].title} as starting node`\r\n        if(value && key === 'endNode')  states[stateIndex].info[1] = `Setting node ${nodes[indexes[value]].title} as ending node`\r\n        if(targetAll) states[stateIndex].info[1] = `All the other nodes will be targeted`\r\n\r\n        this.setState({\r\n            disableNext: !(value && (key === 'startNode' ? targetAll || endNode : startNode)),\r\n            finished: false,\r\n            [key]: value,\r\n            selectedPath: '',\r\n            states,\r\n            stateIndex,\r\n            engine: !engine, \r\n            nextSteps: [], \r\n            endIndex: false\r\n        })\r\n    }\r\n\r\n    onDownload = () => {\r\n        const { states } = this.state;\r\n        const { nodes, edges } = states[0].file;\r\n\r\n        let fileNodes = nodes.map((n) => { return {id: n.id, title: n.title}});\r\n        let fileEdges = edges.map((n) => { return {source: n.source, target: n.target, cost: n.cost}});\r\n\r\n        let file = JSON.stringify({nodes: fileNodes, edges: fileEdges});\r\n\r\n        let link = document.createElement('a');\r\n        link.href =  window.URL.createObjectURL(new Blob([file],{type: 'application/json'}));\r\n        link.setAttribute('download', `graph-${nodes.length}-${edges.length}-${Date.now()}`);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    }\r\n\r\n    showMessage = (message) => {\r\n        this.setState({ message });\r\n        message = '';\r\n        setTimeout(() => this.setState({ message }), 5000);\r\n    }\r\n\r\n    moveNode = (n, e) => {\r\n        if(!n) return;\r\n        \r\n        var { states, indexes } = this.state;\r\n\r\n        var i = indexes[n.id]; \r\n\r\n        for(let s of states){\r\n            s.file.nodes[i].x = e.x;\r\n            s.file.nodes[i].y = e.y;\r\n        }\r\n    }\r\n\r\n    nextStep = () => {\r\n        let { engine, finished, states, stateIndex } = this.state;\r\n        this.setState({ loading: true });\r\n\r\n        if(states[++stateIndex]){\r\n            let disableNext = !(stateIndex + 1 < states.length);\r\n\r\n            this.setState({ stateIndex, engine: !engine, disableNext: finished && disableNext });\r\n            return;\r\n        }\r\n        \r\n        this.launchAlgorithm();\r\n    }\r\n\r\n    prevStep = () => {\r\n        let { engine, stateIndex, states } = this.state;\r\n        this.setState({ loading: true });\r\n\r\n        stateIndex--;\r\n        \r\n        this.setState({ stateIndex, engine: !engine, disableNext: !(stateIndex < states.length)});\r\n    }\r\n\r\n    launchAlgorithm(name = 'dijkstra'){\r\n        var { disableNext, endNode, engine, finished, indexes, nextSteps, states, stateIndex, startNode, targetAll } = this.state;\r\n\r\n        var { file: { nodes }, currentNode, phase, step, substep } = states[stateIndex];\r\n\r\n        var algorithm = require(`../algorithms/${name}`);\r\n\r\n        switch(phase){\r\n            case 0:\r\n                {\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    currentNode = startNode;\r\n                    \r\n                    let node = newState.file.nodes[indexes[currentNode]];\r\n                    node.prevType = node.type\r\n                    node.type = 'currentNode';\r\n                    newState.currentNode = currentNode;\r\n\r\n                    algorithm.preprocess(newState);\r\n\r\n                    newState.phase++;\r\n                    states.push(newState);\r\n\r\n                    stateIndex++;\r\n\r\n                    this.setState({ states, stateIndex, engine: !engine });\r\n                }\r\n                break;\r\n            case 1:\r\n                let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                if(substep > 0){\r\n                    // Edge at the previous step need to be rerendered as visited edge\r\n                    let edge = newState.file.edges[nodes[indexes[currentNode]].leavingStar[substep-1]];\r\n                    edge.type = edge.prevType;\r\n                    delete edge.prevType;\r\n                }\r\n\r\n                if(nodes[indexes[currentNode]].leavingStar && substep < nodes[indexes[currentNode]].leavingStar.length){\r\n                    let idx = newState.file.nodes[indexes[currentNode]].leavingStar[substep];\r\n                    let edge = newState.file.edges[idx];\r\n\r\n                    algorithm.process(newState, edge, endNode, nextSteps, indexes);\r\n\r\n                    edge.prevType = edge.type;\r\n                    edge.type = 'currentEdge';\r\n\r\n\r\n                    newState.substep++;\r\n                    states.push(newState);\r\n                }\r\n                else{\r\n                    let node = newState.file.nodes[indexes[currentNode]]\r\n                    node.type = node.prevType;\r\n                    delete node.prevType;\r\n\r\n                    currentNode = nextSteps[step];\r\n\r\n                    if(!currentNode){\r\n                        phase++;\r\n                        step = 0;\r\n\r\n                        if(targetAll){\r\n                            disableNext = true;\r\n                            finished = true;\r\n\r\n                            newState.info = [`All paths explored, algorithm completed`]\r\n                        }\r\n                        else{\r\n                            currentNode = endNode;\r\n                            node = newState.file.nodes[indexes[currentNode]]\r\n                            node.prevType = node.type;\r\n                            node.type = 'currentNode';\r\n                        \r\n                            newState.phase++;\r\n                            newState.step = 0;\r\n                            newState.substep = 0;\r\n                            \r\n                            newState.info = [`Setting node ${nodes[indexes[endNode]].title} (ending node) as current node since there is no node left to explore`]\r\n                        }\r\n                    }\r\n                    else{\r\n                        node = newState.file.nodes[indexes[currentNode]]\r\n                        node.prevType = node.type;\r\n                        node.type = 'currentNode';\r\n                        \r\n                        newState.info = [`Setting node ${nodes[indexes[currentNode]].title} as the current node`]\r\n                        newState.substep = 0;\r\n                        newState.step++;\r\n                    }\r\n\r\n                    newState.currentNode = currentNode;\r\n                    states.push(newState);\r\n                    \r\n                }\r\n\r\n                stateIndex++;\r\n\r\n                this.setState({ disableNext, engine: !engine, finished, nextSteps, states, stateIndex });\r\n                break;\r\n            case 2:\r\n                {\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    let node = newState.file.nodes[indexes[currentNode]];\r\n\r\n                    algorithm.postprocess(newState, indexes, node);\r\n\r\n                    currentNode = node.pred;\r\n\r\n                    node = newState.file.nodes[indexes[currentNode]];\r\n                    node.prevType = node.type;\r\n                    node.type = 'currentNode';\r\n\r\n                    disableNext = currentNode === startNode;\r\n\r\n                    newState.step++;\r\n                    \r\n                    stateIndex++;\r\n\r\n                    if(!disableNext){        \r\n                        newState.currentNode = currentNode;\r\n                        states.push(newState);\r\n                        \r\n                        this.setState({ engine: !engine, stateIndex, states });\r\n                    }\r\n                    else{\r\n                        node.type = node.prevType;\r\n                        delete node.prevType;\r\n\r\n                        newState.info.push(`Found shortest path that leads node ${nodes[indexes[startNode]].title} to node ${nodes[indexes[endNode]].title}`);\r\n\r\n                        newState.currentNode = null;\r\n                        states.push(newState);\r\n                        this.setState({ disableNext, endIndex: stateIndex, engine: !engine, finished: true, stateIndex, states });\r\n                    }\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    targetAll = (e, value) => {\r\n        const { endNode, engine, indexes, startNode, states } = this.state;\r\n        if( value ){\r\n            states[0].info[1] = `All the other nodes will be targeted`\r\n            states[0].file.nodes[indexes[endNode]].type = 'empty'\r\n        }\r\n \r\n        this.setState({ disableNext: value ? !startNode : !(endNode && startNode), endNode: '', engine: !engine, finished: false, selectedPath: '', stateIndex: 0, states: [states[0]], targetAll: value });\r\n    }\r\n\r\n    getPaths = (file) => {\r\n        if(!file) return {}\r\n\r\n        const {indexes} = this.state;\r\n        \r\n        let paths = {}\r\n        for(let node of file.nodes){\r\n            if(node.pred){\r\n                paths[node.id] = [node.id]\r\n\r\n                let tmp_pred = node.pred;\r\n                while(tmp_pred){\r\n                    if(paths[tmp_pred]){\r\n                        paths[node.id].unshift(...paths[tmp_pred]);\r\n                        break;\r\n                    }\r\n                    else{\r\n                        paths[node.id].unshift(tmp_pred);\r\n                    }\r\n\r\n                    tmp_pred = file.nodes[indexes[tmp_pred]].pred;\r\n                }\r\n            }\r\n        }\r\n\r\n        return paths;\r\n    }\r\n\r\n    togglePath = (selectedPath, path, prevPath) => {\r\n        const { engine, finished, indexes, startNode, stateIndex, states } = this.state;\r\n\r\n        if(!path || (stateIndex <= states.length - 1 && !finished) || (stateIndex < states.length - 1 && finished)) return;\r\n\r\n        let { nodes, edges } = states[stateIndex].file;\r\n\r\n        for(let i in prevPath){\r\n            i = parseInt(i);\r\n            let node = prevPath[i];\r\n            let this_node = nodes[indexes[node]];\r\n\r\n            this_node.type = this_node.prevType;\r\n            delete this_node.prevType;\r\n\r\n            if(i < prevPath.length - 1)\r\n                for(let edge of edges){\r\n                    if(edge.source === node && edge.target === prevPath[i+1]){\r\n                        edge.type = edge.prevType;\r\n                        delete edge.prevType;\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n\r\n        if(this.state.selectedPath === selectedPath){\r\n            selectedPath = '';\r\n        }\r\n        else {\r\n            for(let i in path){\r\n                i = parseInt(i);\r\n                let node = path[i];\r\n                let this_node = nodes[indexes[node]];\r\n                \r\n                this_node.prevType = this_node.type;\r\n                switch(node){\r\n                    case startNode:\r\n                        this_node.type = 'startNode';\r\n                        break;\r\n                    case selectedPath:\r\n                        this_node.type = 'endNode';\r\n                        break;\r\n                    default:\r\n                        this_node.type = 'pathNode';\r\n                        break;\r\n                }\r\n\r\n                if(i < path.length - 1)\r\n                    for(let edge of edges){\r\n                        if(edge.source === node && edge.target === path[i+1]){\r\n                            edge.prevType = edge.type;\r\n                            edge.type = 'pathEdge'\r\n                            break;\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        this.setState({ engine: !engine, selectedPath, states });\r\n    }\r\n\r\n    setColor = k => v => { let { colors, engine } = this.state; colors[k] = v.hex;  this.setState({ colors, engine: !engine }); }\r\n\r\n    showPicker = (prev, next) => this.setState({colorPicker: prev===next ? '' : next});\r\n\r\n    isPathEdge = (edge, paths) => {\r\n        let shortestPath = paths[edge.target];\r\n        let [pred] = shortestPath.slice(-2,-1);\r\n        \r\n        return pred === edge.source;\r\n    }\r\n\r\n    computeObjective = (edges, paths) => {\r\n        const { targetAll } = this.state;\r\n\r\n        let objective = 0\r\n        for(let edge of edges) \r\n            if(targetAll){\r\n                if(this.isPathEdge(edge, paths)) objective += edge.cost ? edge.cost : 1;\r\n            }\r\n            else if(edge.type === 'pathEdge') objective += edge.cost ? edge.cost : 1;\r\n\r\n        return objective;\r\n    }\r\n\r\n    stringPath = (nodes, path) => {\r\n        const { indexes } = this.state;\r\n\r\n        return path.map(n => nodes[indexes[n]].title).join(PATH_SEPARATOR);\r\n    }\r\n\r\n    render() {\r\n        const { colorPicker, colors, disableNext, finished, loading, states, stateIndex, message, engine, selectedPath, startNode, endNode, targetAll} = this.state;\r\n        const file = states[stateIndex] ? states[stateIndex].file : null;\r\n\r\n        const shortestPaths = this.getPaths(file);\r\n        \r\n        return (\r\n            <div className=\"SPP-root\">\r\n                <h2>SHORTEST PATH PROBLEM</h2>\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-drop\"}>\r\n                    <Dropzone\r\n                        getFile={this.getFile}\r\n                        hide={file}\r\n                        showMessage={this.showMessage}\r\n                        validationMode=\"SPP\"\r\n                    />\r\n                </div>\r\n\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-generator\"}>\r\n                    <ExamplesManager getFile={this.getFile} loading={loading} />\r\n                </div>\r\n\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-generator\"}>\r\n                    <RandomManager getFile={this.getFile} loading={loading} />\r\n                </div>\r\n                \r\n                {!file && <div className=\"SPP-spacer\">\r\n                    <Paper className=\"SPP-paper\">\r\n                        <div className={message ? \"SPP-paperDiv\" : \"SPP-paperDivHide\"}>\r\n                            {message}\r\n                        </div>\r\n                    </Paper>\r\n                </div>}\r\n                \r\n                {file && <div className=\"SPP-graph\">\r\n                    <GraphBuilder\r\n                        colors={colors}\r\n                        edges={file.edges}\r\n                        labelSize = {13}\r\n                        layoutEngineType={engine}\r\n                        moveNode={this.moveNode}\r\n                        nodes={file.nodes}\r\n                        onRenderComplete={() => this.setState({ loading: false })}\r\n                        onSelectNode={this.moveNode}\r\n                    />\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <Button className=\"SPP-button\" onClick={() => this.onReset(true)}>CLEAR</Button>\r\n                        <Button className=\"SPP-button\" onClick={() => this.onReset()}>RESET</Button>\r\n                        <Button className=\"SPP-button\" onClick={() => this.onDownload()}><GetApp/></Button>\r\n\r\n                        {Object.keys(colors).map(k => {\r\n                            const v = colors[k]\r\n\r\n                            return (\r\n                                <div key={k} className={colorPicker===k ? \"SPP-legendPicked\" : \"SPP-legend\"} onClick={() => this.showPicker(colorPicker, k)}>\r\n                                    <div style={{backgroundColor: v}} className=\"SPP-legendColor\"/>\r\n                                    <p className=\"SPP-legendKey\">{k}</p>\r\n                                    {colorPicker===k && <SketchPicker className='SPP-colorPicker' color={v} onChangeComplete={this.setColor(k)}/>}\r\n                                </div>\r\n                            )\r\n                        })}\r\n\r\n                        <ButtonGroup className=\"SPP-buttonRight\">\r\n                            <Button onClick={() => this.prevStep()} disabled={stateIndex === 0  || loading}>\r\n                                <KeyboardArrowLeft/>\r\n                            </Button>\r\n\r\n                            <Button onClick={() => this.nextStep()} disabled={disableNext || loading}>\r\n                                <KeyboardArrowRight/>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        \r\n                        <div className=\"SPP-loading\" >\r\n                            {loading && <CircularProgress color='inherit' size={35}/>}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <TextField\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"Start Node\"\r\n                            value={startNode}\r\n                            onChange={this.onChange('startNode')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\" \r\n                            SelectProps={{MenuProps: { className: 'SPP-menu'}}} \r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <TextField\r\n                            disabled={targetAll}\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"End Node\"\r\n                            value={endNode}\r\n                            onChange={this.onChange('endNode')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\" \r\n                            SelectProps={{MenuProps: { className: 'SPP-menu'}}} \r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.filter(e => e.id !== startNode).map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <FormControlLabel\r\n                            className=\"SPP-switch\"\r\n                            control={<Switch size=\"small\" checked={targetAll} color=\"primary\" onChange={this.targetAll} />}\r\n                            label=\"Target all\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Info</h3>\r\n                        <InfoBox phase={states[stateIndex].phase} step={states[stateIndex].step} substep={states[stateIndex].substep} info={states[stateIndex].info} />\r\n                    </div>\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Paths {stateIndex === states.length - 1 && finished ? `(O.F. ${this.computeObjective(file.edges, shortestPaths)})`: ''}</h3>\r\n                        <table className=\"SPP-paths\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th style={{width: '15%'}}><strong>Node</strong></th>\r\n                                    <th style={{width: '70%'}}><strong>Shortest Path</strong></th>\r\n                                    <th style={{width: '15%'}}><strong>Path Cost</strong></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {file.nodes.map(e => (\r\n                                    <tr key={e.title} className={e.id === startNode ? 'SPP-sourceRow SPP-unselectableRow' : stateIndex === states.length - 1 ? e.id === selectedPath ? 'SPP-selectedRow SPP-selectableRow' : shortestPaths[e.id] ? 'SPP-selectableRow' : 'SPP-unselectableRow' : 'SPP-unselectableRow'} onClick={() => this.togglePath(e.id, shortestPaths[e.id], shortestPaths[selectedPath])}>\r\n                                        <td style={{width: '15%'}}>{e.title}</td>\r\n                                        <td style={{width: '70%'}}>{e.id === startNode ? 'Source' : stateIndex === states.length - 1 && finished ? shortestPaths[e.id] ? this.stringPath(file.nodes, shortestPaths[e.id]) : 'No path found' : shortestPaths[e.id] ? this.stringPath(file.nodes, shortestPaths[e.id])  : ''}</td>\r\n                                    <td style={{width: '15%'}}>{stateIndex === states.length - 1 && finished ? e.distance >= 0 ? e.distance : '∞' : e.distance >= 0 ? e.distance : ''}</td>\r\n                                </tr>\r\n                                ))}\r\n                            </tbody>\r\n                               \r\n                        </table>\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SPP;","import React, {Component} from 'react';\r\nimport './css/App.css';\r\n\r\n// import Homepage from \"./components/Homepage\";\r\n// import LeftDrawer from './components/LeftDrawer';\r\nimport NavBar from './components/NavBar';\r\nimport SPP from './components/SPP';\r\n// import MFP from './components/MFP';\r\n// import MCFP from './components/MCFP';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  onToggleDrawer = (open) => {\r\n    this.setState({ open: open });\r\n  }\r\n\r\n  toggleDrawer() {\r\n    this.sidebar.toggleDrawer();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <Router basename=\"/NFO\">\r\n            <div className=\"App-root\">\r\n              <NavBar onClick={() => this.toggleDrawer()}></NavBar>\r\n              <main className=\"App-container\">\r\n                {/* <LeftDrawer onRef={ref => (this.sidebar = ref)} onToggle={this.onToggleDrawer}/> */}\r\n                <div className=\"App-centerPane\">\r\n                  {/* <Switch>\r\n                    <Route\r\n                      exact path=\"/\"\r\n                      component={Homepage}\r\n                    />\r\n                  </Switch> */}\r\n\r\n                  <Switch>\r\n                    <Route\r\n                      // exact path=\"/spp\"\r\n                      exact path=\"/\"\r\n                      component={SPP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  {/* <Switch>\r\n                    <Route\r\n                      exact path=\"/mfp\"\r\n                      component={MFP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  <Switch>\r\n                    <Route\r\n                      exact path=\"/mcfp\"\r\n                      component={MCFP}\r\n                    />\r\n                  </Switch> */}\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </Router>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}