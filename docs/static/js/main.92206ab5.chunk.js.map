{"version":3,"sources":["algorithms/dijkstra.js","algorithms sync /^/.*$","components/NavBar.js","utilities/arrangeNodes.js","components/Dropzone.js","examples/index.js","components/ExamplesManager.js","components/RandomManager.js","utilities/randomGenerator.js","components/GraphBuilder.js","components/SPP.js","App.js","serviceWorker.js","index.js"],"names":["preprocess","nodes","edges","currentNode","el","distance","id","includes","type","pred","process","edge","endNode","nextSteps","indexes","updateNode","target","push","source","cost","postprocess","prevType","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","NavBar","AppBar","position","className","Toolbar","Typography","variant","color","Component","f","x","Math","random","y","handleText","Dropzone","props","onDrop","accepted","rejected","scope","reader","FileReader","onload","progressEvent","JSON","parse","this","result","validate","adapt","getFile","SyntaxError","showMessage","readAsText","state","message","mode","validationMode","modes","SPP","Array","isArray","nodesIds","entries","i","every","join","Paper","hide","accept","getRootProps","getInputProps","useStyles","makeStyles","theme","createStyles","doc","display","margin","ExamplesManager","classes","files","k","key","onClick","fontSize","input","width","RandomManager","useState","n","setN","m","setM","mMax","TextField","label","inputProps","min","max","step","value","onChange","v","disabled","Button","c","title","leavingStars","j","floor","length","generate","GraphBuilder","selected","moveNode","aName","aValue","concat","attr","getAttribute","document","createAttribute","setAttribute","colors","labelSize","layoutEngineType","GraphConfig","NodeTypes","shapeId","shape","viewBox","cx","cy","r","stroke","current","strokeWidth","empty","end","pathNode","path","startNode","start","visitedNode","visited","NodeSubtypes","EdgeTypes","currentEdge","emptyEdge","pathEdge","visitedEdge","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","readOnly","onSelectNode","setState","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","canCreateEdge","onBackgroundClick","edgeArrowSize","renderDefs","ARROW_SIZE","refX","markerWidth","markerHeight","orient","d","style","fill","renderNodeText","data","isSelected","textAnchor","dy","fontWeight","afterRenderEdge","element","edgeContainer","isEdgeSelected","parentNode","insertBefore","firstChild","edgeColor","comp","querySelector","comp_list","querySelectorAll","sourceNode","x1","y1","targetNode","x2","y2","tan","deg","atan","PI","innerHTML","flow","costTag","cloneNode","capacity","parentElement","appendChild","transform","capacityTag","file","sort","a","b","states","phase","substep","onReset","colorPicker","disableNext","endIndex","finished","selectedPath","stateIndex","targetAll","engine","splice","setTimeout","s","nextStep","launchAlgorithm","prevStep","getPaths","paths","node","tmp_pred","unshift","togglePath","prevPath","parseInt","this_node","setColor","hex","showPicker","prev","next","dist","name","algorithm","require","newState","stringify","leavingStar","idx","shortestPaths","backgroundColor","onChangeComplete","ButtonGroup","KeyboardArrowLeft","KeyboardArrowRight","select","OutlinedInput","MenuItem","FormControlLabel","control","Switch","size","checked","App","open","onToggleDrawer","sidebar","toggleDrawer","basename","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92206ab5.chunk.js","sourcesContent":["export function preprocess(nodes, edges, currentNode){\r\n    for(let el of nodes){\r\n        el.distance = el.id === currentNode ? 0 : -1;\r\n        if(!['startNode', 'endNode', 'currentNode'].includes(el.type)) el.type = 'empty';\r\n        delete el.pred;\r\n    }\r\n\r\n    for(let el of edges){\r\n        el.type = 'emptyEdge';\r\n    }\r\n}\r\n\r\nexport function process(nodes, edge, currentNode, endNode, nextSteps, indexes, updateNode){\r\n    edge.type = 'visitedEdge';\r\n    \r\n    if(edge.target !== endNode && nodes[indexes[edge.target]].type !== 'visitedNode') nextSteps.push(edge.target);\r\n    var { distance } = nodes[indexes[currentNode]]\r\n    updateNode(nodes, edge.source, indexes[edge.target], (edge.cost ? edge.cost : 1) + distance);\r\n}\r\n\r\nexport function postprocess(edges, currentNode){\r\n    if(currentNode.prevType === 'visitedNode') currentNode.prevType = 'pathNode';\r\n\r\n    for(let el of edges) if(currentNode.pred === el.source && currentNode.id === el.target){\r\n        el.type = 'pathEdge';\r\n        break;\r\n    }\r\n\r\n    currentNode.type = currentNode.prevType;\r\n    delete currentNode.prevType;\r\n\r\n    return currentNode.pred;\r\n}","var map = {\n\t\"./dijkstra\": 139,\n\t\"./dijkstra.js\": 139\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 339;","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Typography, /*IconButton*/ } from '@material-ui/core/';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport '../css/NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    \r\n    return(\r\n      <AppBar position=\"absolute\" className=\"NavBar-appBar\">\r\n        <Toolbar className=\"NavBar-toolbar\">\r\n            {/* <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"Open drawer\"\r\n              onClick={this.props.onClick}\r\n            >\r\n              <MenuIcon/>\r\n            </IconButton> */}\r\n            <span className=\"NavBar-spacer\"/>\r\n            <Typography variant=\"h6\" color=\"inherit\" className=\"NavBar-typography\">\r\n                NETWORK FLOWS OPTIMIZATION\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default NavBar;","export default (f) => {\r\n    for(let el of f.nodes){\r\n        el.x = Math.random() * 600;\r\n        el.y = Math.random() * 600;\r\n        el.type = 'empty';\r\n    }\r\n\r\n    for(let el of f.edges){\r\n        el.type = 'emptyEdge';\r\n        el.handleText = '.';\r\n    }\r\n\r\n    return f;\r\n}","import React, { Component } from 'react'\r\nimport Drop from 'react-dropzone';\r\nimport {Paper} from '@material-ui/core';\r\n\r\nimport adapt from '../utilities/arrangeNodes';\r\n\r\nimport '../css/Dropzone.css'\r\n\r\nclass Dropzone extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            message: ''\r\n        }\r\n\r\n        this.getFile = this.props.getFile;\r\n        this.showMessage = this.props.showMessage;\r\n        this.mode = this.props.validationMode;\r\n\r\n        this.modes = {\r\n            SPP: {\r\n                nodes: ['id'],\r\n                edges: ['source', 'target']\r\n            }\r\n        }\r\n    }\r\n\r\n    validate(f){\r\n        if(!(f.nodes && f.edges)){\r\n            this.showMessage('Missing at least one of the following keywords: nodes | edges');\r\n            return false;\r\n        }\r\n\r\n        if(!(Array.isArray(f.nodes) && Array.isArray(f.edges))){\r\n            this.showMessage('Type error: nodes & edges must be array of objects');\r\n            return false;\r\n        }\r\n\r\n        let {nodes, edges} = this.modes[this.mode];\r\n\r\n        let nodesIds = [];\r\n        for(const [i, el] of f.nodes.entries()){\r\n            if(!nodes.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Node at index [${i}] misses at least one of the following keywords: ${nodes.join(' | ')}`);\r\n                return false;\r\n            }\r\n            nodesIds.push(el.id);\r\n        }\r\n\r\n        for(const [i, el] of f.edges.entries()){\r\n            if(!edges.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Edge at index [${i}] misses at least one of the following keywords: ${edges.join(' | ')}`);\r\n                return false;\r\n            }\r\n\r\n            if(!(nodesIds.includes(el.source) && nodesIds.includes(el.target))){\r\n                this.showMessage(`Edge at index [${i}]: source or target node does not exist`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    onDrop = (accepted, rejected) => {\r\n        const scope = this;\r\n\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = function(progressEvent){\r\n            try{\r\n                let f = JSON.parse(this.result);\r\n                if(!scope.validate(f)) return;\r\n\r\n                f = adapt(f);\r\n                scope.getFile(f);\r\n            }\r\n            catch(e){\r\n                if (e instanceof SyntaxError) {\r\n                    scope.showMessage('Not a JSON file');\r\n                    return;\r\n                }\r\n                else throw(e);\r\n            }\r\n        };\r\n\r\n        for (var f of accepted) {\r\n            reader.readAsText(f);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Dropzone-root\">\r\n                <Paper className={this.props.hide ? \"Dropzone-paperHide\" : \"Dropzone-paper\"}>\r\n                    <Drop accept=\".json\" onDrop={this.onDrop}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()} className=\"Dropzone-dropDiv\">\r\n                                <Paper className=\"Dropzone-dropPaper\">\r\n                                    <input {...getInputProps()}/>\r\n                                    <div>\r\n                                        <p>Try dropping the file here, or click to select a file to upload.</p>\r\n                                    </div>\r\n                                </Paper>\r\n                            </div>\r\n                        )}\r\n                    </Drop>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropzone;","import n4 from './spp/N=4,M=3.json'\r\nimport n6 from './spp/N=6,M=9.json'\r\nimport n10 from './spp/N=10,M=25.json'\r\nimport n50 from './spp/N=50,M=171.json'\r\n\r\nexport default {\r\n    'N=4,M=3': n4, \r\n    'N=6,M=9': n6, \r\n    'N=10,M=25': n10, \r\n    'N=50,M=171': n50\r\n};","import React from 'react';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport files from '../examples';\r\nimport adapt from '../utilities/arrangeNodes';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    doc: {\r\n        display: 'inline-block', \r\n        margin: 20\r\n    },\r\n}));\r\n\r\n\r\nlet ExamplesManager = (props) => {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <>\r\n            Alternatively, try one of the following examples:\r\n            \r\n            <br/>\r\n            \r\n            {Object.keys(files).map(k => (\r\n                <div key={k} className={classes.doc}>\r\n                    <DescriptionIcon onClick={() => props.getFile(adapt(files[k]))} fontSize='large'/>\r\n                    <br/>\r\n                    {k}\r\n                </div>\r\n            ))}\r\n        </>\r\n)}\r\n\r\nexport default ExamplesManager;","import React, { useState } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\n\r\nimport generate from '../utilities/randomGenerator';\r\n\r\nconst useStyles = makeStyles((theme) => createStyles({\r\n    input: {\r\n        margin: 10,\r\n        width: 100\r\n    },\r\n}));\r\n\r\n\r\nlet RandomManager = (props) => {\r\n    const classes = useStyles();\r\n\r\n    let [ n, setN ] = useState(2);\r\n    let [ m, setM ] = useState(1);\r\n\r\n    let nMax = 50;\r\n    let mMax = n*(n-1)/2;\r\n    \r\n    return (\r\n    <>\r\n        Otherwise, you can generate a random graph:\r\n        <br/>\r\n        \r\n        <TextField className={classes.input} label='Nodes' type=\"number\" inputProps={{ min: 1, max: nMax, step: 1 }} value={n} onChange={(e) => {let v = e.target.value; setN(v > nMax ? nMax : v); if(m > v*(v-1)/2) setM(v*(v-1)/2)}}/>\r\n        <TextField className={classes.input} label='Edges' type=\"number\" inputProps={{ min: 0, max: mMax, step: 1 }} value={m} onChange={(e) => setM(e.target.value > mMax ? mMax : e.target.value)} disabled={!n}/>\r\n        <br/>\r\n        <Button disabled={!n || !m} variant='outlined' onClick={() => props.getFile(generate(n, m))}>GENERATE</Button>\r\n        \r\n    </>\r\n)}\r\n\r\nexport default RandomManager;","export default (n, m, c=10) => {\r\n    let nodes = [];\r\n    for(let i=1; i<=n; i++){\r\n        nodes.push({\r\n            id: i,\r\n            title: `${i}`,\r\n            x: Math.random() * 600,\r\n            y: Math.random() * 600,\r\n            type: 'empty'\r\n        });\r\n    }\r\n\r\n    let edges = [];\r\n    let leavingStars = {};\r\n    for(let j=0; j<m; j++){\r\n        let source = 1 + Math.floor(Math.random() * (n - 1));\r\n\r\n        if(!leavingStars[source]) leavingStars[source] = [];\r\n        \r\n        while (leavingStars[source].length === n - source){\r\n            source = 1 + Math.floor(Math.random() * (n - 1));\r\n            if(!leavingStars[source]) leavingStars[source] = [];\r\n        }\r\n\r\n        let target = source + Math.floor(Math.random() * (n - source)) + 1;\r\n\r\n        while(leavingStars[source].includes(target)) target = source + Math.floor(Math.random() * (n - source)) + 1;\r\n        leavingStars[source].push(target);\r\n\r\n        let cost = Math.floor(Math.random() * c);\r\n        \r\n        edges.push({\r\n            source,\r\n            target,\r\n            cost,\r\n            type: 'emptyEdge',\r\n            handleText: cost ? cost : '.'\r\n        });\r\n    }\r\n\r\n    return { nodes, edges };\r\n}","import React, { Component } from 'react';\r\nimport { GraphView } from 'react-digraph';\r\n\r\nimport '../css/GraphBuilder.css';\r\n\r\n\r\nconst ARROW_SIZE = 5;\r\n\r\nclass GraphBuilder extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: null\r\n        }\r\n\r\n        this.moveNode = this.props.moveNode;\r\n    }\r\n\r\n    setAttribute(c, aName, aValue, concat=true){\r\n        var attr = concat ? c.getAttribute(aName) : document.createAttribute(aName);\r\n        c.setAttribute(aName,  attr && concat ? attr + aValue : aValue);\r\n    }\r\n  \r\n    render() {\r\n        const { colors, edges, labelSize, layoutEngineType, nodes } = this.props;\r\n        \r\n        const GraphConfig =  {\r\n            NodeTypes: {\r\n                currentNode: {\r\n                    shapeId: \"#currentNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"currentNode\" key=\"3\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.current} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                empty: {\r\n                    shapeId: \"#empty\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"empty\" key=\"0\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.empty}  />\r\n                        </symbol>\r\n                    )\r\n                },\r\n                endNode: {\r\n                    shapeId: \"#endNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"endNode\" key=\"2\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.end} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                pathNode: {\r\n                    shapeId: \"#pathNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"pathNode\" key=\"4\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.path} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                startNode: {\r\n                    shapeId: \"#startNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"startNode\" key=\"1\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.start} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                visitedNode: {\r\n                    shapeId: \"#visitedNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"visitedNode\" key=\"5\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.visited} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                }\r\n            },\r\n            NodeSubtypes: {},\r\n            EdgeTypes: {\r\n                currentEdge: {\r\n                    shapeId: \"#currentEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"currentEdge\" key=\"3\"/>\r\n                    ),\r\n                    color: colors.current\r\n                },\r\n                emptyEdge: {  // required to show empty edges\r\n                    shapeId: \"#emptyEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\"  key=\"0\"/>\r\n                    ),\r\n                    color: colors['not visited']\r\n                },\r\n                pathEdge: {\r\n                    shapeId: \"#pathEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"pathEdge\" key=\"1\" />\r\n                    ),\r\n                    color: colors.path\r\n                },\r\n                visitedEdge: {\r\n                    shapeId: \"#visitedEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"visitedEdge\" key=\"2\" />\r\n                    ),\r\n                    color: colors.visited\r\n                }\r\n            }\r\n        }\r\n\r\n        const NodeTypes = GraphConfig.NodeTypes;\r\n        const NodeSubtypes = GraphConfig.NodeSubtypes;\r\n        const EdgeTypes = GraphConfig.EdgeTypes;\r\n\r\n        return(\r\n            <div className=\"GraphBuilder-root\">\r\n                <GraphView  ref='GraphView'\r\n                    nodeKey=\"id\"\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    selected={this.state.selected}\r\n                    nodeTypes={NodeTypes}\r\n                    nodeSubtypes={NodeSubtypes}\r\n                    edgeTypes={EdgeTypes}\r\n                    readOnly\r\n                    onSelectNode={(e) => e === this.state.selected ? this.setState({selected: null}) : this.setState({selected: e})}\r\n                    onCreateNode={() => {}}\r\n                    onUpdateNode={() => {}}\r\n                    onDeleteNode={() => {}}\r\n                    onSelectEdge={() => {}}\r\n                    onCreateEdge={() => {}}\r\n                    onSwapEdge={() => {}}\r\n                    onDeleteEdge={() => {}}\r\n                    canCreateEdge={() => {}}\r\n\r\n                    onBackgroundClick={(x, y) => this.moveNode(this.state.selected, {x,y})}\r\n\r\n                    layoutEngineType={layoutEngineType ? null : false}\r\n\r\n                    edgeArrowSize={ARROW_SIZE}\r\n\r\n                    renderDefs={() => {\r\n                        return Object.entries(EdgeTypes).map((o) => {\r\n                            let k=o[0], v=o[1];\r\n\r\n                            return <marker\r\n                                id={`end-arrow-${k}`}\r\n                                key={`end-arrow-${k}`}\r\n                                viewBox={`0 -${ARROW_SIZE / 2} ${ARROW_SIZE} ${ARROW_SIZE}`}\r\n                                refX={`${ARROW_SIZE / 2}`}\r\n                                markerWidth={`${ARROW_SIZE}`}\r\n                                markerHeight={`${ARROW_SIZE}`}\r\n                                orient=\"auto\"\r\n                            >\r\n                                <path\r\n                                    className=\"arrow\"\r\n                                    d={`M0,-${ARROW_SIZE / 2}L${ARROW_SIZE},0L0,${ARROW_SIZE / 2}`}\r\n                                    style={{fill: v.color}}\r\n                                />\r\n                            </marker>\r\n                        })\r\n                    }}\r\n\r\n                    renderNodeText={(data, id, isSelected) => {\r\n                        return <text className=\"node-text\" textAnchor=\"middle\" color=\"white\">\r\n                            <tspan x=\"0\" dy=\"3\" fontSize=\"7px\">{data.title}</tspan>\r\n                            <tspan fill=\"blue\" stroke=\"white\" strokeWidth=\"0.3\" fontWeight=\"bold\" x=\"0\" dy=\"25\" fontSize=\"10px\">{'distance' in data ? data.distance < 0 ? '∞' : data.distance : ''}</tspan>\r\n                            <title>{data.title}</title>\r\n                        </text>\r\n                    }}\r\n\r\n                    afterRenderEdge={(id, element, edge, edgeContainer, isEdgeSelected) => {\r\n                        edgeContainer.parentNode.insertBefore( edgeContainer, edgeContainer.parentNode.firstChild);\r\n                        \r\n                        var edgeColor = EdgeTypes[edge.type ? edge.type : 'emptyEdge'].color;\r\n                        /***** Setting edge color *****/ \r\n                        \r\n                        let comp = edgeContainer.querySelector('.edge');\r\n                        if(!comp) return;\r\n\r\n                        this.setAttribute(comp, 'style', `stroke: ${edgeColor};  marker-end: url(#end-arrow-${edge.type})`, false);\r\n                        /***** Setting arrow end color *****/ \r\n\r\n                        comp = document.querySelector('.arrow');\r\n                        this.setAttribute(comp, 'style',  `fill: ${edgeColor};`, false);\r\n\r\n                        //Because at first there is only one element, but then it would create 2 new elements per render\r\n                        let comp_list = edgeContainer.querySelectorAll('.edge-text');\r\n\r\n                        //When edge is moving \".edge-text\" elements do not exist\r\n                        if(!comp_list.length) return;\r\n\r\n                        comp = comp_list[0]; \r\n\r\n                        /***** Rotating labels according to edge slope *****/ \r\n\r\n                        let {x: x1, y: y1} = element.props.sourceNode;\r\n                        let {x: x2, y: y2} = element.props.targetNode;\r\n\r\n                        let x = (x1+x2)/2, y = (y1+y2)/2;\r\n\r\n                        let tan = (y2 - y1)/(x2 - x1);\r\n                        let deg = Math.atan(tan)*180/Math.PI;;\r\n\r\n                        this.setAttribute(comp, 'style', `fill: ${edgeColor}; stroke: white; stroke-width: 0.5px; font-weight: bold; font-size: ${labelSize}`, false);\r\n                        this.setAttribute(comp, 'transform', `translate(${x}, ${y}) rotate(${deg}) translate(0, -${labelSize})`, false);\r\n                        comp.innerHTML = edge.flow ? edge.flow : '';\r\n\r\n                        /***** Labels for costs and maximum capacity *****/ \r\n                        \r\n                        if(edge.cost && comp_list.length === 1){\r\n                            let costTag = comp.cloneNode(true);\r\n                            \r\n                            this.setAttribute(costTag, 'transform', ` translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`);\r\n                            costTag.id = \"cost-tag\";\r\n                            costTag.style.fill = 'red';\r\n                            costTag.innerHTML = edge.cost;\r\n                            \r\n                            comp.parentElement.appendChild(costTag);\r\n                        }\r\n                        else if(comp_list[1] && comp_list[1].id === 'cost-tag'){\r\n                                let transform = comp_list[0].getAttribute('transform');\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`, false);\r\n                        }\r\n                        \r\n                        if(edge.capacity && comp_list.length === 1){\r\n                            let capacityTag = comp.cloneNode(true);\r\n\r\n                            this.setAttribute(capacityTag, 'transform', ` translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`);\r\n                            capacityTag.id = \"capacity-tag\";\r\n                            capacityTag.style.fill = 'blue';\r\n                            capacityTag.innerHTML = edge.capacity;\r\n                            \r\n                            comp.parentElement.appendChild(capacityTag);\r\n                        }\r\n                        else {\r\n                            let transform = comp_list[0].getAttribute('transform');\r\n                            if(comp_list[1] && comp_list[1].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                            else if(comp_list[2] && comp_list[2].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[2], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default GraphBuilder;","import React, { Component } from 'react';\r\nimport Dropzone from './Dropzone';\r\nimport ExamplesManager from './ExamplesManager';\r\nimport RandomManager from './RandomManager';\r\nimport GraphBuilder from './GraphBuilder';\r\nimport { Button, ButtonGroup, FormControlLabel, MenuItem, OutlinedInput, Paper, Switch, TextField } from '@material-ui/core';\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons';\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nimport '../css/SPP.css'\r\n\r\n// var d3 = require('d3-force');\r\n\r\nconst PATH_SEPARATOR = ' → '\r\n\r\nclass SPP extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            colorPicker: '',\r\n            colors: {\r\n                current: 'red',\r\n                'not visited': 'black',\r\n                end: 'green',\r\n                path: 'blue',\r\n                start: 'orange',\r\n                visited: '#c9c900'\r\n            },\r\n            disableNext: true,\r\n            endIndex: false,\r\n            endNode: '',\r\n            finished: false,\r\n            indexes: {},\r\n            message: '',\r\n            nextSteps: [],\r\n            selectedPath: '',\r\n            startNode: '',\r\n            stateIndex: 0,\r\n            states: [],\r\n            targetAll: true\r\n        }\r\n    }\r\n\r\n    getFile = (file) => {\r\n        var indexes = {};\r\n\r\n        file.nodes.sort((a,b) => a.id - b.id)\r\n\r\n        for(let [i, el] of file.nodes.entries()){\r\n            indexes[el.id] = i;\r\n        }\r\n\r\n        var { states } = this.state;\r\n        states.push({phase: 0, step: 0, substep: 0, currentNode: null, file});\r\n\r\n        this.setState({ states, indexes });\r\n    }\r\n\r\n    onReset = () => this.setState({\r\n        colorPicker: '',\r\n        colors: {\r\n            current: 'red',\r\n            'not visited': 'black',\r\n            end: 'green',\r\n            path: 'blue',\r\n            start: 'orange',\r\n            visited: '#c9c900'\r\n        },\r\n        disableNext: true,\r\n        endIndex: false,\r\n        endNode: '',\r\n        finished: false,\r\n        indexes: {},\r\n        message: '',\r\n        nextSteps: [],\r\n        selectedPath: '',\r\n        startNode: '',\r\n        stateIndex: 0,\r\n        states: [],\r\n        targetAll: true\r\n    });\r\n\r\n    onChange = (key) => (e) => {\r\n        var { endNode, engine, startNode, stateIndex, states, targetAll } = this.state;\r\n\r\n        states.splice(1, states.length - 1);\r\n        stateIndex = 0;\r\n\r\n        for(let n of states[stateIndex].file.nodes){\r\n            if(n.id === e.target.value){\r\n                n.type = key\r\n            }\r\n            else if(n.type === key) n.type = 'empty';\r\n        }\r\n\r\n        for(let n of states[stateIndex].file.edges) n.type = 'emptyEdge';\r\n        states[stateIndex].currentNode = null\r\n\r\n        this.setState({\r\n            disableNext: !(e.target.value && (key === 'startNode' ? targetAll || endNode : startNode)),\r\n            finished: false,\r\n            [key]: e.target.value,\r\n            selectedPath: '',\r\n            states,\r\n            stateIndex,\r\n            engine: !engine, \r\n            nextSteps: [], \r\n            endIndex: false\r\n        })\r\n    }\r\n\r\n    showMessage = (message) => {\r\n        this.setState({ message });\r\n        message = '';\r\n        setTimeout(() => this.setState({ message }), 5000);\r\n    }\r\n\r\n    moveNode = (n, e) => {\r\n        if(!n) return;\r\n        \r\n        var { states, indexes } = this.state;\r\n\r\n        var i = indexes[n.id]; \r\n\r\n        for(let s of states){\r\n            s.file.nodes[i].x = e.x;\r\n            s.file.nodes[i].y = e.y;\r\n        }\r\n    }\r\n\r\n    updateNode(nodes, pred, i, dist){\r\n        let el = nodes[i];\r\n\r\n        if(el.type === 'empty') el.type = 'visitedNode';\r\n        \r\n        /******* If distance < 0, node was never explored *******/\r\n        if(el.distance < 0 || el.distance > dist){\r\n            el.distance = dist;\r\n            el.pred = pred;\r\n        }\r\n    }\r\n\r\n    nextStep = () => {\r\n        let { engine, finished, states, stateIndex } = this.state;\r\n\r\n        if(states[++stateIndex]){\r\n            let disableNext = !(stateIndex + 1 < states.length);\r\n\r\n            this.setState({ stateIndex, engine: !engine, disableNext: finished && disableNext });\r\n            return;\r\n        }\r\n        \r\n        this.launchAlgorithm();\r\n    }\r\n\r\n    prevStep = () => {\r\n        let { engine, stateIndex, states } = this.state;\r\n\r\n        stateIndex--;\r\n        \r\n        this.setState({ stateIndex, engine: !engine, disableNext: !(stateIndex < states.length)});\r\n    }\r\n\r\n    launchAlgorithm(name = 'dijkstra'){\r\n        var { disableNext, endNode, engine, finished, indexes, nextSteps, states, stateIndex, startNode, targetAll } = this.state;\r\n\r\n        var {file: {nodes, edges}, currentNode, phase, step, substep} = states[stateIndex];\r\n\r\n        var algorithm = require(`../algorithms/${name}`);\r\n\r\n        switch(phase){\r\n            case 0:\r\n                {\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    /******* POTENTIALLY AMBIGUOUS *******/\r\n                    let {file: {nodes, edges}} = newState;\r\n\r\n                    currentNode = startNode;\r\n                    nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type\r\n                    nodes[indexes[currentNode]].type = 'currentNode';\r\n\r\n                    algorithm.preprocess(nodes, edges, currentNode);\r\n\r\n                    newState.currentNode = currentNode;\r\n                    newState.phase++;\r\n                    states.push(newState);\r\n\r\n                    stateIndex++;\r\n\r\n                    this.setState({ states, stateIndex, engine: !engine });\r\n                }\r\n                break;\r\n            case 1:\r\n                if(step === 0 && substep === 0){\r\n                    for(let [i, el] of edges.entries()){\r\n                        let node =  nodes[indexes[el.source]];\r\n                        \r\n                        if(!node.leavingStar) node.leavingStar = [];\r\n\r\n                        node.leavingStar.push(i);\r\n                    }\r\n                }\r\n                \r\n                if(nodes[indexes[currentNode]].leavingStar && substep < nodes[indexes[currentNode]].leavingStar.length){\r\n                    if(substep > 0){\r\n                        let idx = nodes[indexes[currentNode]].leavingStar[substep-1]\r\n                        edges[idx].type = edges[idx].prevType;\r\n                        delete edges[idx].prevType;\r\n                    }\r\n                    \r\n                    let idx = nodes[indexes[currentNode]].leavingStar[substep]\r\n\r\n                    algorithm.process(nodes, edges[idx], currentNode, endNode, nextSteps, indexes, this.updateNode);\r\n\r\n                    edges[idx].prevType = edges[idx].type;\r\n                    edges[idx].type = 'currentEdge';\r\n\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    newState.substep++;\r\n                    states.push(newState);\r\n                }\r\n                else{\r\n                    if(substep > 0){\r\n                        let idx = nodes[indexes[currentNode]].leavingStar[substep-1]\r\n                        edges[idx].type = edges[idx].prevType;\r\n                        delete edges[idx].prevType;\r\n                    }\r\n\r\n                    nodes[indexes[currentNode]].type = nodes[indexes[currentNode]].prevType;\r\n                    delete nodes[indexes[currentNode]].prevType;\r\n\r\n                    currentNode = nextSteps[step];\r\n\r\n                    let newState = null;\r\n\r\n                    if(!currentNode){\r\n                        phase++;\r\n                        step = 0;\r\n\r\n                        if(targetAll){\r\n                            disableNext = true;\r\n                            finished = true;\r\n                        }\r\n                        else{\r\n                            currentNode = endNode;\r\n                            nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                            nodes[indexes[currentNode]].type = 'currentNode';\r\n                        \r\n                            newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                            newState.phase++;\r\n                            newState.step = 0;\r\n                            newState.substep = 0;\r\n                        }\r\n                    }\r\n                    else{\r\n                        nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                        nodes[indexes[currentNode]].type = 'currentNode';\r\n                        \r\n                        newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                        newState.substep = 0;\r\n                        newState.step++;\r\n                    }\r\n\r\n                    if(newState) {\r\n                        newState.currentNode = currentNode;\r\n                        states.push(newState);\r\n                    }\r\n                    \r\n                }\r\n\r\n                if(!finished) stateIndex++;\r\n\r\n                this.setState({ disableNext, engine: !engine, finished, nextSteps, states, stateIndex });\r\n                break;\r\n            case 2:\r\n                {\r\n                    currentNode = algorithm.postprocess(edges, nodes[indexes[currentNode]]);\r\n                    nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                    nodes[indexes[currentNode]].type = 'currentNode';\r\n\r\n                    disableNext = currentNode === startNode;\r\n\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                    newState.step++;\r\n                    \r\n                    stateIndex++;\r\n\r\n                    if(!disableNext){        \r\n                        newState.currentNode = currentNode;\r\n                        states.push(newState);\r\n                        \r\n                        this.setState({ engine: !engine, stateIndex, states });\r\n                    }\r\n                    else{\r\n                        newState.file.nodes[indexes[currentNode]].type = newState.file.nodes[indexes[currentNode]].prevType;\r\n                        delete newState.file.nodes[indexes[currentNode]].prevType;\r\n\r\n                        newState.currentNode = null;\r\n                        states.push(newState);\r\n                        this.setState({ disableNext, endIndex: stateIndex, engine: !engine, finished: true, states });\r\n                    }\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    targetAll = (e, value) => {\r\n        const { endNode, startNode, states } = this.state;\r\n        this.setState({ disableNext: value ? !startNode : !(endNode && startNode), endNode: '', finished: false, selectedPath: '', stateIndex: 0, states: [states[0]], targetAll: value });\r\n    }\r\n\r\n    getPaths = (file) => {\r\n        if(!file) return {}\r\n\r\n        const {indexes} = this.state;\r\n        \r\n        let paths = {}\r\n        for(let node of file.nodes){\r\n            if(node.pred){\r\n                paths[node.id] = [node.id]\r\n\r\n                let tmp_pred = node.pred;\r\n                while(tmp_pred){\r\n                    if(paths[tmp_pred]){\r\n                        paths[node.id].unshift(...paths[tmp_pred]);\r\n                        break;\r\n                    }\r\n                    else{\r\n                        paths[node.id].unshift(tmp_pred);\r\n                    }\r\n\r\n                    tmp_pred = file.nodes[indexes[tmp_pred]].pred;\r\n                }\r\n            }\r\n        }\r\n\r\n        return paths;\r\n    }\r\n\r\n    togglePath = (selectedPath, path, prevPath) => {\r\n        const { engine, finished, indexes, startNode, stateIndex, states } = this.state;\r\n\r\n        if(!path || (stateIndex <= states.length - 1 && !finished) || (stateIndex < states.length - 1 && finished)) return;\r\n\r\n        let { nodes, edges } = states[stateIndex].file;\r\n\r\n        for(let i in prevPath){\r\n            i = parseInt(i);\r\n            let node = prevPath[i];\r\n            let this_node = nodes[indexes[node]];\r\n\r\n            this_node.type = this_node.prevType;\r\n            delete this_node.prevType;\r\n\r\n            if(i < prevPath.length - 1)\r\n                for(let edge of edges){\r\n                    if(edge.source === node && edge.target === prevPath[i+1]){\r\n                        edge.type = edge.prevType;\r\n                        delete edge.prevType;\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n\r\n        if(this.state.selectedPath === selectedPath){\r\n            selectedPath = '';\r\n        }\r\n        else {\r\n            for(let i in path){\r\n                i = parseInt(i);\r\n                let node = path[i];\r\n                let this_node = nodes[indexes[node]];\r\n                \r\n                this_node.prevType = this_node.type;\r\n                switch(node){\r\n                    case startNode:\r\n                        this_node.type = 'startNode';\r\n                        break;\r\n                    case selectedPath:\r\n                        this_node.type = 'endNode';\r\n                        break;\r\n                    default:\r\n                        this_node.type = 'pathNode';\r\n                        break;\r\n                }\r\n\r\n                if(i < path.length - 1)\r\n                    for(let edge of edges){\r\n                        if(edge.source === node && edge.target === path[i+1]){\r\n                            edge.prevType = edge.type;\r\n                            edge.type = 'pathEdge'\r\n                            break;\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        this.setState({ engine: !engine, selectedPath, states });\r\n    }\r\n\r\n    setColor = k => v => { let { colors, engine } = this.state; colors[k] = v.hex;  this.setState({ colors, engine: !engine }); }\r\n\r\n    showPicker = (prev, next) => this.setState({colorPicker: prev===next ? '' : next})\r\n\r\n    render() {\r\n        const { colorPicker, colors, disableNext, finished, states, stateIndex, message, engine, selectedPath, startNode, endNode, targetAll} = this.state;\r\n        const file = states[stateIndex] ? states[stateIndex].file : null;\r\n\r\n        const shortestPaths = this.getPaths(file);\r\n        \r\n        return (\r\n            <div className=\"SPP-root\">\r\n                <h2>SHORTEST PATH PROBLEM</h2>\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-drop\"}>\r\n                    <Dropzone\r\n                        getFile={this.getFile}\r\n                        hide={file}\r\n                        showMessage={this.showMessage}\r\n                        validationMode=\"SPP\"\r\n                    />\r\n                </div>\r\n\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-generator\"}>\r\n                    <ExamplesManager getFile={this.getFile} />\r\n                </div>\r\n\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-generator\"}>\r\n                    <RandomManager getFile={this.getFile} />\r\n                </div>\r\n                \r\n                {!file && <div className=\"SPP-spacer\">\r\n                    <Paper className=\"SPP-paper\">\r\n                        <div className={message ? \"SPP-paperDiv\" : \"SPP-paperDivHide\"}>\r\n                            {message}\r\n                        </div>\r\n                    </Paper>\r\n                </div>}\r\n                \r\n                {file && <div className=\"SPP-graph\">\r\n                    <GraphBuilder\r\n                        colors={colors}\r\n                        edges={file.edges}\r\n                        labelSize = {13}\r\n                        layoutEngineType={engine}\r\n                        moveNode={this.moveNode}\r\n                        nodes={file.nodes}\r\n                        onSelectNode={this.moveNode}\r\n                    />\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <Button className=\"SPP-button\" onClick={() => this.onReset()}>RESET</Button>\r\n\r\n                        {Object.keys(colors).map(k => {\r\n                            const v = colors[k]\r\n\r\n                            return (\r\n                                <div key={k} className={colorPicker===k ? \"SPP-legendPicked\" : \"SPP-legend\"} onClick={() => this.showPicker(colorPicker, k)}>\r\n                                    <div style={{backgroundColor: v}} className=\"SPP-legendColor\"/>\r\n                                    <p className=\"SPP-legendKey\">{k}</p>\r\n                                    {colorPicker===k && <SketchPicker className='SPP-colorPicker' color={v} onChangeComplete={this.setColor(k)}/>}\r\n                                </div>\r\n                            )\r\n                        })}\r\n\r\n                        <ButtonGroup className=\"SPP-buttonRight\">\r\n                            <Button onClick={() => this.prevStep()} disabled={stateIndex === 0}>\r\n                                <KeyboardArrowLeft/>\r\n                            </Button>\r\n\r\n                            <Button onClick={() => this.nextStep()} disabled={disableNext}>\r\n                                <KeyboardArrowRight/>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <TextField\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"Start Node\"\r\n                            value={startNode}\r\n                            onChange={this.onChange('startNode')}\r\n                            margin=\"normal\"\r\n                            input={<OutlinedInput/>}\r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <TextField\r\n                            disabled={targetAll}\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"End Node\"\r\n                            value={endNode}\r\n                            onChange={this.onChange('endNode')}\r\n                            margin=\"normal\"\r\n                            input={<OutlinedInput/>}\r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <FormControlLabel\r\n                            className=\"SPP-switch\"\r\n                            control={<Switch size=\"small\" checked={targetAll} color=\"primary\" onChange={this.targetAll} />}\r\n                            label=\"Target all\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Info</h3>\r\n                        <table>\r\n                            <tbody>\r\n                                 <tr><td>Phase:</td><td>{states[stateIndex].phase}</td></tr>\r\n                                <tr><td>Step:</td><td>{states[stateIndex].step}</td></tr>\r\n                                <tr><td>Substep:</td><td>{states[stateIndex].substep}</td></tr>\r\n                            </tbody>\r\n                               \r\n                        </table>\r\n                    </div>\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Paths</h3>\r\n                        <table className=\"SPP-paths\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td><strong>Node</strong></td>\r\n                                    <td><strong>Shortest Path</strong>\r\n                                    </td><td><strong>Path Cost</strong></td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {file.nodes.map(e => (\r\n                                    <tr key={e.id} className={e.id === startNode ? 'SPP-sourceRow SPP-unselectableRow' : stateIndex === states.length - 1 ? e.id === selectedPath ? 'SPP-selectedRow SPP-selectableRow' : shortestPaths[e.id] ? 'SPP-selectableRow' : 'SPP-unselectableRow' : 'SPP-unselectableRow'} onClick={() => this.togglePath(e.id, shortestPaths[e.id], shortestPaths[selectedPath])}>\r\n                                        <td style={{width: '15%'}}>{e.id}</td>\r\n                                        <td style={{width: '70%'}}>{e.id === startNode ? 'Source' : stateIndex === states.length - 1 && finished ? shortestPaths[e.id] ? shortestPaths[e.id].join(PATH_SEPARATOR) : 'No path found' : shortestPaths[e.id] ? shortestPaths[e.id].join(PATH_SEPARATOR)  : ''}</td>\r\n                                        <td style={{width: '15%'}}>{stateIndex === states.length - 1 && finished ? e.distance >= 0 ? e.distance : '∞' : e.distance >= 0 ? e.distance : ''}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                               \r\n                        </table>\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SPP;","import React, {Component} from 'react';\r\nimport './css/App.css';\r\n\r\n// import Homepage from \"./components/Homepage\";\r\n// import LeftDrawer from './components/LeftDrawer';\r\nimport NavBar from './components/NavBar';\r\nimport SPP from './components/SPP';\r\n// import MFP from './components/MFP';\r\n// import MCFP from './components/MCFP';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  onToggleDrawer = (open) => {\r\n    this.setState({ open: open });\r\n  }\r\n\r\n  toggleDrawer() {\r\n    this.sidebar.toggleDrawer();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <Router basename=\"/NFO\">\r\n            <div className=\"App-root\">\r\n              <NavBar onClick={() => this.toggleDrawer()}></NavBar>\r\n              <main className=\"App-container\">\r\n                {/* <LeftDrawer onRef={ref => (this.sidebar = ref)} onToggle={this.onToggleDrawer}/> */}\r\n                <div className=\"App-centerPane\">\r\n                  {/* <Switch>\r\n                    <Route\r\n                      exact path=\"/\"\r\n                      component={Homepage}\r\n                    />\r\n                  </Switch> */}\r\n\r\n                  <Switch>\r\n                    <Route\r\n                      // exact path=\"/spp\"\r\n                      exact path=\"/\"\r\n                      component={SPP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  {/* <Switch>\r\n                    <Route\r\n                      exact path=\"/mfp\"\r\n                      component={MFP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  <Switch>\r\n                    <Route\r\n                      exact path=\"/mcfp\"\r\n                      component={MCFP}\r\n                    />\r\n                  </Switch> */}\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </Router>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}