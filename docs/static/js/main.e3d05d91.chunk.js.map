{"version":3,"sources":["algorithms/dijkstra.js","algorithms sync /^/.*$","components/Homepage.js","components/LeftDrawer.js","components/NavBar.js","components/Dropzone.js","components/GraphBuilder.js","components/SPP.js","components/MFP.js","components/MCFP.js","App.js","serviceWorker.js","index.js"],"names":["preprocess","nodes","edges","currentNode","el","distance","id","includes","type","pred","process","edge","endNode","nextSteps","indexes","updateNode","target","push","source","cost","postprocess","prevType","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Homepage","props","state","classes","this","className","top","divLogo","style","extAlign","divFooter","Component","withStyles","theme","root","minWidth","overflowX","table","marginTop","width","textField","margin","appLogo","display","padding","height","appLogoFooter","border","paddingLeft","paddingRight","position","bottom","LeftDrawer","toggleDrawer","bind","open","onRef","undefined","setState","onToggle","Drawer","variant","paper","to","textDecoration","Tooltip","title","MenuItem","ListItemIcon","Home","ListItemText","primary","Directions","TrendingUp","TrendingDown","React","NavBar","AppBar","Toolbar","IconButton","color","aria-label","onClick","Typography","Dropzone","onDrop","accepted","rejected","scope","reader","FileReader","onload","progressEvent","f","JSON","parse","result","validate","adapt","getFile","SyntaxError","showMessage","readAsText","message","mode","validationMode","modes","SPP","x","Math","random","y","handleText","Array","isArray","nodesIds","i","every","join","entries","Paper","hide","accept","getRootProps","getInputProps","GraphBuilder","selected","moveNode","c","aName","aValue","concat","attr","getAttribute","document","createAttribute","setAttribute","colors","labelSize","layoutEngineType","GraphConfig","NodeTypes","shapeId","shape","viewBox","key","cx","cy","r","stroke","current","strokeWidth","empty","end","pathNode","path","startNode","start","visitedNode","visited","NodeSubtypes","EdgeTypes","currentEdge","emptyEdge","pathEdge","visitedEdge","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","readOnly","onSelectNode","onCreateNode","onUpdateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","canCreateEdge","onBackgroundClick","edgeArrowSize","renderDefs","k","v","ARROW_SIZE","refX","markerWidth","markerHeight","orient","d","fill","renderNodeText","data","isSelected","textAnchor","dy","fontSize","fontWeight","afterRenderEdge","element","edgeContainer","isEdgeSelected","parentNode","insertBefore","firstChild","edgeColor","comp","querySelector","comp_list","querySelectorAll","length","sourceNode","x1","y1","targetNode","x2","y2","tan","deg","atan","PI","innerHTML","flow","costTag","cloneNode","capacity","parentElement","appendChild","transform","capacityTag","file","sort","a","b","states","phase","step","substep","onReset","colorPicker","disableNext","endIndex","finished","selectedPath","stateIndex","targetAll","onChange","engine","splice","n","value","setTimeout","s","nextStep","launchAlgorithm","prevStep","getPaths","paths","node","tmp_pred","unshift","togglePath","prevPath","parseInt","this_node","setColor","hex","showPicker","prev","next","dist","name","algorithm","require","newState","stringify","leavingStar","idx","shortestPaths","Button","backgroundColor","onChangeComplete","ButtonGroup","disabled","KeyboardArrowLeft","KeyboardArrowRight","TextField","select","label","input","OutlinedInput","FormControlLabel","control","Switch","size","checked","MFP","MCFP","App","onToggleDrawer","sidebar","basename","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3d05d91.chunk.js","sourcesContent":["export function preprocess(nodes, edges, currentNode){\r\n    for(let el of nodes){\r\n        el.distance = el.id === currentNode ? 0 : -1;\r\n        if(!['startNode', 'endNode', 'currentNode'].includes(el.type)) el.type = 'empty';\r\n        delete el.pred;\r\n    }\r\n\r\n    for(let el of edges){\r\n        el.type = 'emptyEdge';\r\n    }\r\n}\r\n\r\nexport function process(nodes, edge, currentNode, endNode, nextSteps, indexes, updateNode){\r\n    edge.type = 'visitedEdge';\r\n    \r\n    if(edge.target !== endNode && nodes[indexes[edge.target]].type !== 'visitedNode') nextSteps.push(edge.target);\r\n    var { distance } = nodes[indexes[currentNode]]\r\n    updateNode(nodes, edge.source, indexes[edge.target], (edge.cost ? edge.cost : 1) + distance);\r\n}\r\n\r\nexport function postprocess(edges, currentNode){\r\n    if(currentNode.prevType === 'visitedNode') currentNode.prevType = 'pathNode';\r\n\r\n    for(let el of edges) if(currentNode.pred === el.source && currentNode.id === el.target){\r\n        el.type = 'pathEdge';\r\n        break;\r\n    }\r\n\r\n    currentNode.type = currentNode.prevType;\r\n    delete currentNode.prevType;\r\n\r\n    return currentNode.pred;\r\n}","var map = {\n\t\"./dijkstra\": 148,\n\t\"./dijkstra.js\": 148\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 349;","import React, { Component } from 'react'\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme =>  ({\r\n    root: {\r\n      minWidth: \"40%\",\r\n      overflowX: \"auto\"\r\n    },\r\n    table: {\r\n      minWidth: 250\r\n    },\r\n    top: {\r\n        marginTop: 70,\r\n        width: '100%'\r\n    },\r\n    textField: {\r\n        minWidth: 250,\r\n        margin: 0,\r\n        width: '100%'\r\n    },\r\n    appLogo: {\r\n        display: 'block',\r\n        padding: 0,\r\n        width: '60%',\r\n        height: '60%',\r\n        margin: '0 auto 0 auto'\r\n      },\r\n    divLogo:{\r\n        height: '50%',\r\n        width: '100%',\r\n        margin: 0,\r\n        padding: 0\r\n    },\r\n    appLogoFooter: {\r\n        border: 'solid 1px',\r\n        display: 'block',\r\n        margin: '0 auto',\r\n        paddingLeft: 0,\r\n        paddingRight: 0,\r\n        width: '50%',\r\n        height: '50%'\r\n    },\r\n    divFooter:{\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        padding: 0,\r\n        width: '93%',\r\n        margin: 0\r\n    }\r\n  });\r\n\r\n\r\nclass Homepage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.top}>\r\n                <div className={classes.divLogo}>\r\n                    <div style={{extAlign: 'center'}}><h1>NETWORK FLOWS OPTIMIZATION</h1></div>\r\n                </div>\r\n                <div className={classes.divFooter}>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default (withStyles(styles)(Homepage));","import React from 'react';\r\nimport { Drawer, Tooltip } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {Home, Directions, TrendingDown, TrendingUp} from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../css/LeftDrawer.css';\r\n\r\n\r\nclass LeftDrawer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggleDrawer = this.toggleDrawer.bind(this);\r\n    this.state = {\r\n      open: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  toggleDrawer() {\r\n    var open = this.state.open;\r\n\r\n    this.setState({\r\n      open: !this.state.open\r\n    });\r\n    this.props.onToggle(!open);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: this.state.open ? \"LeftDrawer-drawerPaper\" : \"LeftDrawer-drawerPaperClose\"\r\n        }}\r\n        open={this.state.open}\r\n      >\r\n        <div style={{height: 65}}/>\r\n        <Link to={'/'} style={{ textDecoration: 'none' }}>\r\n          <Tooltip title=\"HOMEPAGE\">\r\n            <MenuItem className=\"LeftDrawer-menuItem\">\r\n              <ListItemIcon>\r\n                <Home />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"HOMEPAGE\" />\r\n            </MenuItem>\r\n          </Tooltip>\r\n        </Link>\r\n        \r\n        <Link to={'/spp'} style={{ textDecoration: 'none' }}>\r\n          <Tooltip title=\"SHORTEST PATH\">\r\n            <MenuItem className=\"LeftDrawer-menuItem\">\r\n              <ListItemIcon>\r\n                <Directions />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"SHORTEST PATH\" />\r\n            </MenuItem>\r\n          </Tooltip>\r\n        </Link>\r\n\r\n        <Link to={'/mfp'} style={{ textDecoration: 'none' }}>\r\n          <Tooltip title=\"MAX FLOW\">\r\n            <MenuItem className=\"LeftDrawer-menuItem\">\r\n              <ListItemIcon>\r\n                <TrendingUp />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"MAX FLOW\" />\r\n            </MenuItem>\r\n          </Tooltip>\r\n        </Link>\r\n\r\n        <Link to={'/mcfp'} style={{ textDecoration: 'none' }}>\r\n          <Tooltip title=\"MIN COST FLOW\">\r\n            <MenuItem className=\"LeftDrawer-menuItem\">\r\n              <ListItemIcon>\r\n                <TrendingDown />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"MIN COST FLOW\" />\r\n            </MenuItem>\r\n          </Tooltip>\r\n        </Link>\r\n\r\n      </Drawer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftDrawer;","import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { Typography, IconButton } from '@material-ui/core/';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport '../css/NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    \r\n    return(\r\n      <AppBar position=\"absolute\" className=\"NavBar-appBar\">\r\n        <Toolbar className=\"NavBar-toolbar\">\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"Open drawer\"\r\n              onClick={this.props.onClick}\r\n            >\r\n              <MenuIcon/>\r\n            </IconButton>\r\n            <span className=\"NavBar-spacer\"/>\r\n            <Typography variant=\"h6\" color=\"inherit\" className=\"NavBar-typography\">\r\n                NETWORK FLOWS OPTIMIZATION\r\n            </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\nimport Drop from 'react-dropzone';\r\nimport {Paper} from '@material-ui/core';\r\n\r\nimport '../css/Dropzone.css'\r\n\r\nclass Dropzone extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            message: ''\r\n        }\r\n\r\n        this.getFile = this.props.getFile;\r\n        this.showMessage = this.props.showMessage;\r\n        this.mode = this.props.validationMode;\r\n\r\n        this.modes = {\r\n            SPP: {\r\n                nodes: ['id'],\r\n                edges: ['source', 'target']\r\n            }\r\n        }\r\n    }\r\n\r\n    adapt(f){\r\n        for(let el of f.nodes){\r\n            el.x = Math.random() * 600;\r\n            el.y = Math.random() * 600;\r\n            el.type = 'empty';\r\n        }\r\n\r\n        for(let el of f.edges){\r\n            el.type = 'emptyEdge';\r\n            el.handleText = '.';\r\n        }\r\n\r\n        return f;\r\n    }\r\n\r\n    validate(f){\r\n        if(!(f.nodes && f.edges)){\r\n            this.showMessage('Missing at least one of the following keywords: nodes | edges');\r\n            return false;\r\n        }\r\n\r\n        if(!(Array.isArray(f.nodes) && Array.isArray(f.edges))){\r\n            this.showMessage('Type error: nodes & edges must be array of objects');\r\n            return false;\r\n        }\r\n\r\n        let {nodes, edges} = this.modes[this.mode];\r\n\r\n        let nodesIds = [];\r\n        for(const [i, el] of f.nodes.entries()){\r\n            if(!nodes.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Node at index [${i}] misses at least one of the following keywords: ${nodes.join(' | ')}`);\r\n                return false;\r\n            }\r\n            nodesIds.push(el.id);\r\n        }\r\n\r\n        for(const [i, el] of f.edges.entries()){\r\n            if(!edges.every((e) => Object.keys(el).includes(e))){\r\n                this.showMessage(`Edge at index [${i}] misses at least one of the following keywords: ${edges.join(' | ')}`);\r\n                return false;\r\n            }\r\n\r\n            if(!(nodesIds.includes(el.source) && nodesIds.includes(el.target))){\r\n                this.showMessage(`Edge at index [${i}]: source or target node does not exist`);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    onDrop = (accepted, rejected) => {\r\n        const scope = this;\r\n\r\n        var reader = new FileReader();\r\n        \r\n        reader.onload = function(progressEvent){\r\n            try{\r\n                let f = JSON.parse(this.result);\r\n                if(!scope.validate(f)) return;\r\n\r\n                f = scope.adapt(f);\r\n                scope.getFile(f);\r\n            }\r\n            catch(e){\r\n                if (e instanceof SyntaxError) {\r\n                    scope.showMessage('Not a JSON file');\r\n                    return;\r\n                }\r\n                else throw(e);\r\n            }\r\n        };\r\n\r\n        for (var f of accepted) {\r\n            reader.readAsText(f);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Dropzone-root\">\r\n                <Paper className={this.props.hide ? \"Dropzone-paperHide\" : \"Dropzone-paper\"}>\r\n                    <Drop accept=\".json\" onDrop={this.onDrop}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()} className=\"Dropzone-dropDiv\">\r\n                                <Paper className=\"Dropzone-dropPaper\">\r\n                                    <input {...getInputProps()}/>\r\n                                    <div>\r\n                                        <p>Try dropping the file here, or click to select a file to upload.</p>\r\n                                    </div>\r\n                                </Paper>\r\n                            </div>\r\n                        )}\r\n                    </Drop>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropzone;","import React, { Component } from 'react';\r\nimport { GraphView } from 'react-digraph';\r\n\r\nimport '../css/GraphBuilder.css';\r\n\r\n\r\nconst ARROW_SIZE = 5;\r\n\r\nclass GraphBuilder extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: null\r\n        }\r\n\r\n        this.moveNode = this.props.moveNode;\r\n    }\r\n\r\n    setAttribute(c, aName, aValue, concat=true){\r\n        var attr = concat ? c.getAttribute(aName) : document.createAttribute(aName);\r\n        c.setAttribute(aName,  attr && concat ? attr + aValue : aValue);\r\n    }\r\n  \r\n    render() {\r\n        const { colors, edges, labelSize, layoutEngineType, nodes } = this.props;\r\n        \r\n        const GraphConfig =  {\r\n            NodeTypes: {\r\n                currentNode: {\r\n                    shapeId: \"#currentNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"currentNode\" key=\"3\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.current} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                empty: {\r\n                    shapeId: \"#empty\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"empty\" key=\"0\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.empty}  />\r\n                        </symbol>\r\n                    )\r\n                },\r\n                endNode: {\r\n                    shapeId: \"#endNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"endNode\" key=\"2\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.end} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                pathNode: {\r\n                    shapeId: \"#pathNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"pathNode\" key=\"4\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.path} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                startNode: {\r\n                    shapeId: \"#startNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"startNode\" key=\"1\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.start} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                },\r\n                visitedNode: {\r\n                    shapeId: \"#visitedNode\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 150 150\" id=\"visitedNode\" key=\"5\">\r\n                            <circle cx=\"75\" cy=\"75\" r=\"15\" stroke={colors.visited} strokeWidth=\"2\"/>\r\n                        </symbol>\r\n                    )\r\n                }\r\n            },\r\n            NodeSubtypes: {},\r\n            EdgeTypes: {\r\n                currentEdge: {\r\n                    shapeId: \"#currentEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"currentEdge\" key=\"3\"/>\r\n                    ),\r\n                    color: colors.current\r\n                },\r\n                emptyEdge: {  // required to show empty edges\r\n                    shapeId: \"#emptyEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\"  key=\"0\"/>\r\n                    ),\r\n                    color: colors['not visited']\r\n                },\r\n                pathEdge: {\r\n                    shapeId: \"#pathEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"pathEdge\" key=\"1\" />\r\n                    ),\r\n                    color: colors.path\r\n                },\r\n                visitedEdge: {\r\n                    shapeId: \"#visitedEdge\",\r\n                    shape: (\r\n                        <symbol viewBox=\"0 0 50 50\" id=\"visitedEdge\" key=\"2\" />\r\n                    ),\r\n                    color: colors.visited\r\n                }\r\n            }\r\n        }\r\n\r\n        const NodeTypes = GraphConfig.NodeTypes;\r\n        const NodeSubtypes = GraphConfig.NodeSubtypes;\r\n        const EdgeTypes = GraphConfig.EdgeTypes;\r\n\r\n        return(\r\n            <div className=\"GraphBuilder-root\">\r\n                <GraphView  ref='GraphView'\r\n                    nodeKey=\"id\"\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    selected={this.state.selected}\r\n                    nodeTypes={NodeTypes}\r\n                    nodeSubtypes={NodeSubtypes}\r\n                    edgeTypes={EdgeTypes}\r\n                    readOnly\r\n                    onSelectNode={(e) => e === this.state.selected ? this.setState({selected: null}) : this.setState({selected: e})}\r\n                    onCreateNode={() => {}}\r\n                    onUpdateNode={() => {}}\r\n                    onDeleteNode={() => {}}\r\n                    onSelectEdge={() => {}}\r\n                    onCreateEdge={() => {}}\r\n                    onSwapEdge={() => {}}\r\n                    onDeleteEdge={() => {}}\r\n                    canCreateEdge={() => {}}\r\n\r\n                    onBackgroundClick={(x, y) => this.moveNode(this.state.selected, {x,y})}\r\n\r\n                    layoutEngineType={layoutEngineType ? null : false}\r\n\r\n                    edgeArrowSize={ARROW_SIZE}\r\n\r\n                    renderDefs={() => {\r\n                        return Object.entries(EdgeTypes).map((o) => {\r\n                            let k=o[0], v=o[1];\r\n\r\n                            return <marker\r\n                                id={`end-arrow-${k}`}\r\n                                key={`end-arrow-${k}`}\r\n                                viewBox={`0 -${ARROW_SIZE / 2} ${ARROW_SIZE} ${ARROW_SIZE}`}\r\n                                refX={`${ARROW_SIZE / 2}`}\r\n                                markerWidth={`${ARROW_SIZE}`}\r\n                                markerHeight={`${ARROW_SIZE}`}\r\n                                orient=\"auto\"\r\n                            >\r\n                                <path\r\n                                    className=\"arrow\"\r\n                                    d={`M0,-${ARROW_SIZE / 2}L${ARROW_SIZE},0L0,${ARROW_SIZE / 2}`}\r\n                                    style={{fill: v.color}}\r\n                                />\r\n                            </marker>\r\n                        })\r\n                    }}\r\n\r\n                    renderNodeText={(data, id, isSelected) => {\r\n                        return <text className=\"node-text\" textAnchor=\"middle\" color=\"white\">\r\n                            <tspan x=\"0\" dy=\"3\" fontSize=\"7px\">{data.title}</tspan>\r\n                            <tspan fill=\"blue\" stroke=\"white\" strokeWidth=\"0.3\" fontWeight=\"bold\" x=\"0\" dy=\"25\" fontSize=\"10px\">{'distance' in data ? data.distance < 0 ? '∞' : data.distance : ''}</tspan>\r\n                            <title>{data.title}</title>\r\n                        </text>\r\n                    }}\r\n\r\n                    afterRenderEdge={(id, element, edge, edgeContainer, isEdgeSelected) => {\r\n                        edgeContainer.parentNode.insertBefore( edgeContainer, edgeContainer.parentNode.firstChild);\r\n                        \r\n                        var edgeColor = EdgeTypes[edge.type ? edge.type : 'emptyEdge'].color;\r\n                        /***** Setting edge color *****/ \r\n                        \r\n                        let comp = edgeContainer.querySelector('.edge');\r\n                        if(!comp) return;\r\n\r\n                        this.setAttribute(comp, 'style', `stroke: ${edgeColor};  marker-end: url(#end-arrow-${edge.type})`, false);\r\n                        /***** Setting arrow end color *****/ \r\n\r\n                        comp = document.querySelector('.arrow');\r\n                        this.setAttribute(comp, 'style',  `fill: ${edgeColor};`, false);\r\n\r\n                        //Because at first there is only one element, but then it would create 2 new elements per render\r\n                        let comp_list = edgeContainer.querySelectorAll('.edge-text');\r\n\r\n                        //When edge is moving \".edge-text\" elements do not exist\r\n                        if(!comp_list.length) return;\r\n\r\n                        comp = comp_list[0]; \r\n\r\n                        /***** Rotating labels according to edge slope *****/ \r\n\r\n                        let {x: x1, y: y1} = element.props.sourceNode;\r\n                        let {x: x2, y: y2} = element.props.targetNode;\r\n\r\n                        let x = (x1+x2)/2, y = (y1+y2)/2;\r\n\r\n                        let tan = (y2 - y1)/(x2 - x1);\r\n                        let deg = Math.atan(tan)*180/Math.PI;;\r\n\r\n                        this.setAttribute(comp, 'style', `fill: ${edgeColor}; stroke: white; stroke-width: 0.5px; font-weight: bold; font-size: ${labelSize}`, false);\r\n                        this.setAttribute(comp, 'transform', `translate(${x}, ${y}) rotate(${deg}) translate(0, -${labelSize})`, false);\r\n                        comp.innerHTML = edge.flow ? edge.flow : '';\r\n\r\n                        /***** Labels for costs and maximum capacity *****/ \r\n                        \r\n                        if(edge.cost && comp_list.length === 1){\r\n                            let costTag = comp.cloneNode(true);\r\n                            \r\n                            this.setAttribute(costTag, 'transform', ` translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`);\r\n                            costTag.id = \"cost-tag\";\r\n                            costTag.style.fill = 'red';\r\n                            costTag.innerHTML = edge.cost;\r\n                            \r\n                            comp.parentElement.appendChild(costTag);\r\n                        }\r\n                        else if(comp_list[1] && comp_list[1].id === 'cost-tag'){\r\n                                let transform = comp_list[0].getAttribute('transform');\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(-${edge.capacity ? labelSize : 0}, ${labelSize*2})`, false);\r\n                        }\r\n                        \r\n                        if(edge.capacity && comp_list.length === 1){\r\n                            let capacityTag = comp.cloneNode(true);\r\n\r\n                            this.setAttribute(capacityTag, 'transform', ` translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`);\r\n                            capacityTag.id = \"capacity-tag\";\r\n                            capacityTag.style.fill = 'blue';\r\n                            capacityTag.innerHTML = edge.capacity;\r\n                            \r\n                            comp.parentElement.appendChild(capacityTag);\r\n                        }\r\n                        else {\r\n                            let transform = comp_list[0].getAttribute('transform');\r\n                            if(comp_list[1] && comp_list[1].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[1], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                            else if(comp_list[2] && comp_list[2].id === 'capacity-tag'){\r\n                                this.setAttribute(comp_list[2], 'transform', `${transform} translate(${edge.cost ? labelSize : 0}, ${labelSize*2})`, false);\r\n                            }\r\n                        }\r\n                        \r\n                    }}\r\n                />\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default GraphBuilder;","import React, { Component } from 'react';\r\nimport Dropzone from './Dropzone';\r\nimport GraphBuilder from './GraphBuilder';\r\nimport { Button, ButtonGroup, FormControlLabel, MenuItem, OutlinedInput, Paper, Switch, TextField } from '@material-ui/core';\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons';\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nimport '../css/SPP.css'\r\n\r\n// var d3 = require('d3-force');\r\n\r\nconst PATH_SEPARATOR = ' → '\r\n\r\nclass SPP extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            colorPicker: '',\r\n            colors: {\r\n                current: 'red',\r\n                'not visited': 'black',\r\n                end: 'green',\r\n                path: 'blue',\r\n                start: 'orange',\r\n                visited: '#c9c900'\r\n            },\r\n            disableNext: true,\r\n            endIndex: false,\r\n            endNode: '',\r\n            finished: false,\r\n            indexes: {},\r\n            message: '',\r\n            nextSteps: [],\r\n            selectedPath: '',\r\n            startNode: '',\r\n            stateIndex: 0,\r\n            states: [],\r\n            targetAll: true\r\n        }\r\n    }\r\n\r\n    getFile = (file) => {\r\n        var indexes = {};\r\n\r\n        file.nodes.sort((a,b) => a.id - b.id)\r\n\r\n        for(let [i, el] of file.nodes.entries()){\r\n            indexes[el.id] = i;\r\n        }\r\n\r\n        var { states } = this.state;\r\n        states.push({phase: 0, step: 0, substep: 0, currentNode: null, file});\r\n\r\n        this.setState({ states, indexes });\r\n    }\r\n\r\n    onReset = () => this.setState({\r\n        colorPicker: '',\r\n        colors: {\r\n            current: 'red',\r\n            'not visited': 'black',\r\n            end: 'green',\r\n            path: 'blue',\r\n            start: 'orange',\r\n            visited: '#c9c900'\r\n        },\r\n        disableNext: true,\r\n        endIndex: false,\r\n        endNode: '',\r\n        finished: false,\r\n        indexes: {},\r\n        message: '',\r\n        nextSteps: [],\r\n        selectedPath: '',\r\n        startNode: '',\r\n        stateIndex: 0,\r\n        states: [],\r\n        targetAll: true\r\n    });\r\n\r\n    onChange = (key) => (e) => {\r\n        var { endNode, engine, startNode, stateIndex, states, targetAll } = this.state;\r\n\r\n        states.splice(1, states.length - 1);\r\n        stateIndex = 0;\r\n\r\n        for(let n of states[stateIndex].file.nodes){\r\n            if(n.id === e.target.value){\r\n                n.type = key\r\n            }\r\n            else if(n.type === key) n.type = 'empty';\r\n        }\r\n\r\n        for(let n of states[stateIndex].file.edges) n.type = 'emptyEdge';\r\n        states[stateIndex].currentNode = null\r\n\r\n        this.setState({\r\n            disableNext: !(e.target.value && (key === 'startNode' ? targetAll || endNode : startNode)),\r\n            finished: false,\r\n            [key]: e.target.value,\r\n            selectedPath: '',\r\n            states,\r\n            stateIndex,\r\n            engine: !engine, \r\n            nextSteps: [], \r\n            endIndex: false\r\n        })\r\n    }\r\n\r\n    showMessage = (message) => {\r\n        this.setState({ message });\r\n        message = '';\r\n        setTimeout(() => this.setState({ message }), 5000);\r\n    }\r\n\r\n    moveNode = (n, e) => {\r\n        if(!n) return;\r\n        \r\n        var { states, indexes } = this.state;\r\n\r\n        var i = indexes[n.id]; \r\n\r\n        for(let s of states){\r\n            s.file.nodes[i].x = e.x;\r\n            s.file.nodes[i].y = e.y;\r\n        }\r\n    }\r\n\r\n    updateNode(nodes, pred, i, dist){\r\n        let el = nodes[i];\r\n\r\n        if(el.type === 'empty') el.type = 'visitedNode';\r\n        \r\n        /******* If distance < 0, node was never explored *******/\r\n        if(el.distance < 0 || el.distance > dist){\r\n            el.distance = dist;\r\n            el.pred = pred;\r\n        }\r\n    }\r\n\r\n    nextStep = () => {\r\n        let { engine, finished, states, stateIndex } = this.state;\r\n\r\n        if(states[++stateIndex]){\r\n            let disableNext = !(stateIndex + 1 < states.length);\r\n\r\n            this.setState({ stateIndex, engine: !engine, disableNext: finished && disableNext });\r\n            return;\r\n        }\r\n        \r\n        this.launchAlgorithm();\r\n    }\r\n\r\n    prevStep = () => {\r\n        let { engine, stateIndex, states } = this.state;\r\n\r\n        stateIndex--;\r\n        \r\n        this.setState({ stateIndex, engine: !engine, disableNext: !(stateIndex < states.length)});\r\n    }\r\n\r\n    launchAlgorithm(name = 'dijkstra'){\r\n        var { disableNext, endNode, engine, finished, indexes, nextSteps, states, stateIndex, startNode, targetAll } = this.state;\r\n\r\n        var {file: {nodes, edges}, currentNode, phase, step, substep} = states[stateIndex];\r\n\r\n        var algorithm = require(`../algorithms/${name}`);\r\n\r\n        switch(phase){\r\n            case 0:\r\n                {\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    /******* POTENTIALLY AMBIGUOUS *******/\r\n                    let {file: {nodes, edges}} = newState;\r\n\r\n                    currentNode = startNode;\r\n                    nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type\r\n                    nodes[indexes[currentNode]].type = 'currentNode';\r\n\r\n                    algorithm.preprocess(nodes, edges, currentNode);\r\n\r\n                    newState.currentNode = currentNode;\r\n                    newState.phase++;\r\n                    states.push(newState);\r\n\r\n                    stateIndex++;\r\n\r\n                    this.setState({ states, stateIndex, engine: !engine });\r\n                }\r\n                break;\r\n            case 1:\r\n                if(step === 0 && substep === 0){\r\n                    for(let [i, el] of edges.entries()){\r\n                        let node =  nodes[indexes[el.source]];\r\n                        \r\n                        if(!node.leavingStar) node.leavingStar = [];\r\n\r\n                        node.leavingStar.push(i);\r\n                    }\r\n                }\r\n                \r\n                if(nodes[indexes[currentNode]].leavingStar && substep < nodes[indexes[currentNode]].leavingStar.length){\r\n                    if(substep > 0){\r\n                        let idx = nodes[indexes[currentNode]].leavingStar[substep-1]\r\n                        edges[idx].type = edges[idx].prevType;\r\n                        delete edges[idx].prevType;\r\n                    }\r\n                    \r\n                    let idx = nodes[indexes[currentNode]].leavingStar[substep]\r\n\r\n                    algorithm.process(nodes, edges[idx], currentNode, endNode, nextSteps, indexes, this.updateNode);\r\n\r\n                    edges[idx].prevType = edges[idx].type;\r\n                    edges[idx].type = 'currentEdge';\r\n\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n\r\n                    newState.substep++;\r\n                    states.push(newState);\r\n                }\r\n                else{\r\n                    if(substep > 0){\r\n                        let idx = nodes[indexes[currentNode]].leavingStar[substep-1]\r\n                        edges[idx].type = edges[idx].prevType;\r\n                        delete edges[idx].prevType;\r\n                    }\r\n\r\n                    nodes[indexes[currentNode]].type = nodes[indexes[currentNode]].prevType;\r\n                    delete nodes[indexes[currentNode]].prevType;\r\n\r\n                    currentNode = nextSteps[step];\r\n\r\n                    let newState = null;\r\n\r\n                    if(!currentNode){\r\n                        phase++;\r\n                        step = 0;\r\n\r\n                        if(targetAll){\r\n                            disableNext = true;\r\n                            finished = true;\r\n                        }\r\n                        else{\r\n                            currentNode = endNode;\r\n                            nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                            nodes[indexes[currentNode]].type = 'currentNode';\r\n                        \r\n                            newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                            newState.phase++;\r\n                            newState.step = 0;\r\n                            newState.substep = 0;\r\n                        }\r\n                    }\r\n                    else{\r\n                        nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                        nodes[indexes[currentNode]].type = 'currentNode';\r\n                        \r\n                        newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                        newState.substep = 0;\r\n                        newState.step++;\r\n                    }\r\n\r\n                    if(newState) {\r\n                        newState.currentNode = currentNode;\r\n                        states.push(newState);\r\n                    }\r\n                    \r\n                }\r\n\r\n                if(!finished) stateIndex++;\r\n\r\n                this.setState({ disableNext, engine: !engine, finished, nextSteps, states, stateIndex });\r\n                break;\r\n            case 2:\r\n                {\r\n                    currentNode = algorithm.postprocess(edges, nodes[indexes[currentNode]]);\r\n                    nodes[indexes[currentNode]].prevType = nodes[indexes[currentNode]].type;\r\n                    nodes[indexes[currentNode]].type = 'currentNode';\r\n\r\n                    disableNext = currentNode === startNode;\r\n\r\n                    let newState = JSON.parse(JSON.stringify(states[stateIndex]));\r\n                    newState.step++;\r\n                    \r\n                    stateIndex++;\r\n\r\n                    if(!disableNext){        \r\n                        newState.currentNode = currentNode;\r\n                        states.push(newState);\r\n                        \r\n                        this.setState({ engine: !engine, stateIndex, states });\r\n                    }\r\n                    else{\r\n                        newState.file.nodes[indexes[currentNode]].type = newState.file.nodes[indexes[currentNode]].prevType;\r\n                        delete newState.file.nodes[indexes[currentNode]].prevType;\r\n\r\n                        newState.currentNode = null;\r\n                        states.push(newState);\r\n                        this.setState({ disableNext, endIndex: stateIndex, engine: !engine, finished: true, states });\r\n                    }\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    targetAll = (e, value) => {\r\n        const { endNode, startNode, states } = this.state;\r\n        this.setState({ disableNext: value ? !startNode : !(endNode && startNode), endNode: '', finished: false, selectedPath: '', stateIndex: 0, states: [states[0]], targetAll: value });\r\n    }\r\n\r\n    getPaths = (file) => {\r\n        if(!file) return {}\r\n\r\n        const {indexes} = this.state;\r\n        \r\n        let paths = {}\r\n        for(let node of file.nodes){\r\n            if(node.pred){\r\n                paths[node.id] = [node.id]\r\n\r\n                let tmp_pred = node.pred;\r\n                while(tmp_pred){\r\n                    if(paths[tmp_pred]){\r\n                        paths[node.id].unshift(...paths[tmp_pred]);\r\n                        break;\r\n                    }\r\n                    else{\r\n                        paths[node.id].unshift(tmp_pred);\r\n                    }\r\n\r\n                    tmp_pred = file.nodes[indexes[tmp_pred]].pred;\r\n                }\r\n            }\r\n        }\r\n\r\n        return paths;\r\n    }\r\n\r\n    togglePath = (selectedPath, path, prevPath) => {\r\n        const { engine, finished, indexes, startNode, stateIndex, states } = this.state;\r\n\r\n        if(!path || (stateIndex <= states.length - 1 && !finished) || (stateIndex < states.length - 1 && finished)) return;\r\n\r\n        let { nodes, edges } = states[stateIndex].file;\r\n\r\n        for(let i in prevPath){\r\n            i = parseInt(i);\r\n            let node = prevPath[i];\r\n            let this_node = nodes[indexes[node]];\r\n\r\n            this_node.type = this_node.prevType;\r\n            delete this_node.prevType;\r\n\r\n            if(i < prevPath.length - 1)\r\n                for(let edge of edges){\r\n                    if(edge.source === node && edge.target === prevPath[i+1]){\r\n                        edge.type = edge.prevType;\r\n                        delete edge.prevType;\r\n                        break;\r\n                    }\r\n                }\r\n        }\r\n\r\n        if(this.state.selectedPath === selectedPath){\r\n            selectedPath = '';\r\n        }\r\n        else {\r\n            for(let i in path){\r\n                i = parseInt(i);\r\n                let node = path[i];\r\n                let this_node = nodes[indexes[node]];\r\n                \r\n                this_node.prevType = this_node.type;\r\n                switch(node){\r\n                    case startNode:\r\n                        this_node.type = 'startNode';\r\n                        break;\r\n                    case selectedPath:\r\n                        this_node.type = 'endNode';\r\n                        break;\r\n                    default:\r\n                        this_node.type = 'pathNode';\r\n                        break;\r\n                }\r\n\r\n                if(i < path.length - 1)\r\n                    for(let edge of edges){\r\n                        if(edge.source === node && edge.target === path[i+1]){\r\n                            edge.prevType = edge.type;\r\n                            edge.type = 'pathEdge'\r\n                            break;\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        this.setState({ engine: !engine, selectedPath, states });\r\n    }\r\n\r\n    setColor = k => v => { let { colors, engine } = this.state; colors[k] = v.hex;  this.setState({ colors, engine: !engine }); }\r\n\r\n    showPicker = (prev, next) => this.setState({colorPicker: prev===next ? '' : next})\r\n\r\n    render() {\r\n        const { colorPicker, colors, disableNext, finished, states, stateIndex, message, engine, selectedPath, startNode, endNode, targetAll} = this.state;\r\n        const file = states[stateIndex] ? states[stateIndex].file : null;\r\n\r\n        const shortestPaths = this.getPaths(file);\r\n        \r\n        return (\r\n            <div className=\"SPP-root\">\r\n                <div><h1>SHORTEST PATH PROBLEM</h1></div>\r\n                <div className={file ? \"SPP-dropClosed\" : \"SPP-drop\"}>\r\n                    <Dropzone\r\n                        getFile={this.getFile}\r\n                        hide={file}\r\n                        showMessage={this.showMessage}\r\n                        validationMode=\"SPP\"\r\n                    />\r\n                </div>\r\n                \r\n                {!file && <div className=\"SPP-spacer\">\r\n                    <Paper className=\"SPP-paper\">\r\n                        <div className={message ? \"SPP-paperDiv\" : \"SPP-paperDivHide\"}>\r\n                            {message}\r\n                        </div>\r\n                    </Paper>\r\n                </div>}\r\n                \r\n                {file && <div className=\"SPP-graph\">\r\n                    <GraphBuilder\r\n                        colors={colors}\r\n                        edges={file.edges}\r\n                        labelSize = {13}\r\n                        layoutEngineType={engine}\r\n                        moveNode={this.moveNode}\r\n                        nodes={file.nodes}\r\n                        onSelectNode={this.moveNode}\r\n                    />\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <Button className=\"SPP-button\" onClick={() => this.onReset()}>RESET</Button>\r\n\r\n                        {Object.keys(colors).map(k => {\r\n                            const v = colors[k]\r\n\r\n                            return (\r\n                                <div key={k} className={colorPicker===k ? \"SPP-legendPicked\" : \"SPP-legend\"} onClick={() => this.showPicker(colorPicker, k)}>\r\n                                    <div style={{backgroundColor: v}} className=\"SPP-legendColor\"/>\r\n                                    <p className=\"SPP-legendKey\">{k}</p>\r\n                                    {colorPicker===k && <SketchPicker className='SPP-colorPicker' color={v} onChangeComplete={this.setColor(k)}/>}\r\n                                </div>\r\n                            )\r\n                        })}\r\n\r\n                        <ButtonGroup className=\"SPP-buttonRight\">\r\n                            <Button onClick={() => this.prevStep()} disabled={stateIndex === 0}>\r\n                                <KeyboardArrowLeft/>\r\n                            </Button>\r\n\r\n                            <Button onClick={() => this.nextStep()} disabled={disableNext}>\r\n                                <KeyboardArrowRight/>\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"SPP-spacer\">\r\n                        <TextField\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"Start Node\"\r\n                            value={startNode}\r\n                            onChange={this.onChange('startNode')}\r\n                            margin=\"normal\"\r\n                            input={<OutlinedInput/>}\r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <TextField\r\n                            disabled={targetAll}\r\n                            select\r\n                            className=\"SPP-select\"\r\n                            label=\"End Node\"\r\n                            value={endNode}\r\n                            onChange={this.onChange('endNode')}\r\n                            margin=\"normal\"\r\n                            input={<OutlinedInput/>}\r\n                        >\r\n                            <MenuItem key={'empty'} value='' />\r\n                            {file.nodes.map(e => (\r\n                                <MenuItem key={e.id} value={e.id}>{e.title}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n\r\n                        <FormControlLabel\r\n                            className=\"SPP-switch\"\r\n                            control={<Switch size=\"small\" checked={targetAll} color=\"primary\" onChange={this.targetAll} />}\r\n                            label=\"Target all\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Info</h3>\r\n                        <table>\r\n                            <tbody>\r\n                                 <tr><td>Phase:</td><td>{states[stateIndex].phase}</td></tr>\r\n                                <tr><td>Step:</td><td>{states[stateIndex].step}</td></tr>\r\n                                <tr><td>Substep:</td><td>{states[stateIndex].substep}</td></tr>\r\n                            </tbody>\r\n                               \r\n                        </table>\r\n                    </div>\r\n                    <div className=\"SPP-infoBox\">\r\n                        <h3>Paths</h3>\r\n                        <table className=\"SPP-paths\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <td><strong>Node</strong></td>\r\n                                    <td><strong>Shortest Path</strong>\r\n                                    </td><td><strong>Path Cost</strong></td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {file.nodes.map(e => (\r\n                                    <tr key={e.id} className={e.id === startNode ? 'SPP-sourceRow SPP-unselectableRow' : stateIndex === states.length - 1 ? e.id === selectedPath ? 'SPP-selectedRow SPP-selectableRow' : shortestPaths[e.id] ? 'SPP-selectableRow' : 'SPP-unselectableRow' : 'SPP-unselectableRow'} onClick={() => this.togglePath(e.id, shortestPaths[e.id], shortestPaths[selectedPath])}>\r\n                                        <td style={{width: '15%'}}>{e.id}</td>\r\n                                        <td style={{width: '70%'}}>{e.id === startNode ? 'Source' : stateIndex === states.length - 1 && finished ? shortestPaths[e.id] ? shortestPaths[e.id].join(PATH_SEPARATOR) : 'No path found' : shortestPaths[e.id] ? shortestPaths[e.id].join(PATH_SEPARATOR)  : ''}</td>\r\n                                        <td style={{width: '15%'}}>{stateIndex === states.length - 1 && finished ? e.distance >= 0 ? e.distance : '∞' : e.distance >= 0 ? e.distance : ''}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                               \r\n                        </table>\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SPP;","import React, { Component } from 'react'\r\nimport Dropzone from './Dropzone';\r\n\r\nimport '../css/MFP.css'\r\n\r\nclass MFP extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            file: null\r\n        }\r\n    }\r\n\r\n    getFile = (f) => {\r\n        this.setState({\r\n            file: f\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MFP-root\">\r\n                <div><h1>MFP</h1></div>\r\n                <div className={this.state.file ? \"MFP-contentOneClosed\" : \"MFP-contentOne\"}>\r\n                    TBI\r\n                    <Dropzone\r\n                        getFile={this.getFile}\r\n                        hide={this.state.file}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MFP;","import React, { Component } from 'react'\r\nimport Dropzone from './Dropzone';\r\n\r\nimport '../css/MCFP.css'\r\n\r\nclass MCFP extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            file: null\r\n        }\r\n    }\r\n\r\n    getFile = (f) => {\r\n        this.setState({\r\n            file: f\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"MCFP-root\">\r\n                <div><h1>MCFP</h1></div>\r\n                <div className={this.state.file ? \"MCFP-contentOneClosed\" : \"MCFP-contentOne\"}>\r\n                    TBI\r\n                    <Dropzone\r\n                        getFile={this.getFile}\r\n                        hide={this.state.file}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MCFP;","import React, {Component} from 'react';\r\nimport './css/App.css';\r\n\r\nimport Homepage from \"./components/Homepage\";\r\nimport LeftDrawer from './components/LeftDrawer';\r\nimport NavBar from './components/NavBar';\r\nimport SPP from './components/SPP';\r\nimport MFP from './components/MFP';\r\nimport MCFP from './components/MCFP';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  onToggleDrawer = (open) => {\r\n    this.setState({ open: open });\r\n  }\r\n  \r\n  toggleDrawer() {\r\n    this.sidebar.toggleDrawer();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <Router basename=\"/NFO\">\r\n            <div className=\"App-root\">\r\n              <NavBar onClick={() => this.toggleDrawer()}></NavBar>\r\n              <main className=\"App-container\">\r\n                <LeftDrawer onRef={ref => (this.sidebar = ref)} onToggle={this.onToggleDrawer}/>\r\n                <div className=\"App-centerPane\">\r\n                  <Switch>\r\n                    <Route \r\n                      exact path=\"/\"\r\n                      component={Homepage}\r\n                    />\r\n                  </Switch>\r\n\r\n                  <Switch>\r\n                    <Route \r\n                      exact path=\"/spp\"\r\n                      component={SPP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  <Switch>\r\n                    <Route \r\n                      exact path=\"/mfp\"\r\n                      component={MFP}\r\n                    />\r\n                  </Switch>\r\n\r\n                  <Switch>\r\n                    <Route \r\n                      exact path=\"/mcfp\"\r\n                      component={MCFP}\r\n                    />\r\n                  </Switch>\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </Router>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}